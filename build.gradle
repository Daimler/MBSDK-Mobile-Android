// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'mavenProperties.gradle'

    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath Deps.tool_gradle
        classpath Deps.tool_kotlin_gradle
        classpath Deps.tool_dokka_gradle
        classpath Deps.tool_protobuf_gradle
        classpath Deps.tool_jfrog_buildinfo
        classpath Deps.tool_realm_gradle
        classpath Deps.tool_jacoco_plugin
    }
}

plugins {
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1" apply false
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url azureUrl
        }
    }
}

subprojects {
    // Parallel test execution
    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    afterEvaluate {
        if (isReleaseModule(project)) {
            project.apply from: '../mavenProperties.gradle'
            project.apply from: '../deploy.gradle'
        }
        if (isAndroidModule(project)) {
            project.apply from: '../testing.gradle'
            project.apply plugin: "org.jlleitschuh.gradle.ktlint"
            ktlint {
                version = Versions.ktlint
            }
            task ktlint { dependsOn ktlintCheck }
            android {
                buildToolsVersion Config.buildTools
                compileSdkVersion Config.compileSdk

                defaultConfig {
                    minSdkVersion Config.minSdk
                    targetSdkVersion Config.targetSdk
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                }

                compileOptions {
                    sourceCompatibility Config.javaVersion
                    targetCompatibility Config.javaVersion
                }

                kotlinOptions {
                    jvmTarget = Config.javaVersion
                }
            }

            dependencies {
                implementation fileTree(dir: 'libs', include: ['*.jar'])
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

private static boolean isAndroidModule(Project project) {
    return isAndroidLibrary(project) || isAndroidApp(project)
}

private static boolean isAndroidLibrary(Project project) {
    return project.plugins.hasPlugin('com.android.library')
}

private static boolean isAndroidApp(Project project) {
    return project.plugins.hasPlugin('com.android.application')
}

private static boolean isReleaseModule(Project project) {
    return isAndroidLibrary(project) && !project.name.contains("test")
}