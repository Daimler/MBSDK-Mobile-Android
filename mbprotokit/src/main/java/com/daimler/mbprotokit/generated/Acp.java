// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acp.proto

package com.daimler.mbprotokit.generated;

public final class Acp {
  private Acp() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface VVAOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.VVA)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code proto.VVA}
   */
  public  static final class VVA extends
      com.google.protobuf.GeneratedMessageLite<
          VVA, VVA.Builder> implements
      // @@protoc_insertion_point(message_implements:proto.VVA)
      VVAOrBuilder {
    private VVA() {
    }
    /**
     * Protobuf enum {@code proto.VVA.CommandState}
     */
    public enum CommandState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN_COMMAND_STATE = 0;</code>
       */
      UNKNOWN_COMMAND_STATE(0),
      /**
       * <code>CREATED = 1010;</code>
       */
      CREATED(1010),
      /**
       * <code>ENQUEUED = 1016;</code>
       */
      ENQUEUED(1016),
      /**
       * <code>PROCESSING = 1012;</code>
       */
      PROCESSING(1012),
      /**
       * <code>SUSPENDED = 1017;</code>
       */
      SUSPENDED(1017),
      /**
       * <code>FINISHED = 1018;</code>
       */
      FINISHED(1018),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNOWN_COMMAND_STATE = 0;</code>
       */
      public static final int UNKNOWN_COMMAND_STATE_VALUE = 0;
      /**
       * <code>CREATED = 1010;</code>
       */
      public static final int CREATED_VALUE = 1010;
      /**
       * <code>ENQUEUED = 1016;</code>
       */
      public static final int ENQUEUED_VALUE = 1016;
      /**
       * <code>PROCESSING = 1012;</code>
       */
      public static final int PROCESSING_VALUE = 1012;
      /**
       * <code>SUSPENDED = 1017;</code>
       */
      public static final int SUSPENDED_VALUE = 1017;
      /**
       * <code>FINISHED = 1018;</code>
       */
      public static final int FINISHED_VALUE = 1018;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommandState valueOf(int value) {
        return forNumber(value);
      }

      public static CommandState forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_COMMAND_STATE;
          case 1010: return CREATED;
          case 1016: return ENQUEUED;
          case 1012: return PROCESSING;
          case 1017: return SUSPENDED;
          case 1018: return FINISHED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CommandState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandState>() {
              public CommandState findValueByNumber(int number) {
                return CommandState.forNumber(number);
              }
            };

      private final int value;

      private CommandState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.VVA.CommandState)
    }

    /**
     * Protobuf enum {@code proto.VVA.CommandCondition}
     */
    public enum CommandCondition
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNWON_COMMAND_CONDITION = 0;</code>
       */
      UNKNWON_COMMAND_CONDITION(0),
      /**
       * <code>NONE = 1000;</code>
       */
      NONE(1000),
      /**
       * <code>ACCEPTED = 1001;</code>
       */
      ACCEPTED(1001),
      /**
       * <code>REJECTED = 1002;</code>
       */
      REJECTED(1002),
      /**
       * <code>TERMINATE = 1003;</code>
       */
      TERMINATE(1003),
      /**
       * <code>SUCCESS = 1011;</code>
       */
      SUCCESS(1011),
      /**
       * <code>FAILED = 1013;</code>
       */
      FAILED(1013),
      /**
       * <code>OVERWRITTEN = 1014;</code>
       */
      OVERWRITTEN(1014),
      /**
       * <code>TIMEOUT = 1015;</code>
       */
      TIMEOUT(1015),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNWON_COMMAND_CONDITION = 0;</code>
       */
      public static final int UNKNWON_COMMAND_CONDITION_VALUE = 0;
      /**
       * <code>NONE = 1000;</code>
       */
      public static final int NONE_VALUE = 1000;
      /**
       * <code>ACCEPTED = 1001;</code>
       */
      public static final int ACCEPTED_VALUE = 1001;
      /**
       * <code>REJECTED = 1002;</code>
       */
      public static final int REJECTED_VALUE = 1002;
      /**
       * <code>TERMINATE = 1003;</code>
       */
      public static final int TERMINATE_VALUE = 1003;
      /**
       * <code>SUCCESS = 1011;</code>
       */
      public static final int SUCCESS_VALUE = 1011;
      /**
       * <code>FAILED = 1013;</code>
       */
      public static final int FAILED_VALUE = 1013;
      /**
       * <code>OVERWRITTEN = 1014;</code>
       */
      public static final int OVERWRITTEN_VALUE = 1014;
      /**
       * <code>TIMEOUT = 1015;</code>
       */
      public static final int TIMEOUT_VALUE = 1015;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommandCondition valueOf(int value) {
        return forNumber(value);
      }

      public static CommandCondition forNumber(int value) {
        switch (value) {
          case 0: return UNKNWON_COMMAND_CONDITION;
          case 1000: return NONE;
          case 1001: return ACCEPTED;
          case 1002: return REJECTED;
          case 1003: return TERMINATE;
          case 1011: return SUCCESS;
          case 1013: return FAILED;
          case 1014: return OVERWRITTEN;
          case 1015: return TIMEOUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandCondition>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CommandCondition> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandCondition>() {
              public CommandCondition findValueByNumber(int number) {
                return CommandCondition.forNumber(number);
              }
            };

      private final int value;

      private CommandCondition(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.VVA.CommandCondition)
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VVA parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.daimler.mbprotokit.generated.Acp.VVA prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code proto.VVA}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.daimler.mbprotokit.generated.Acp.VVA, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.VVA)
        com.daimler.mbprotokit.generated.Acp.VVAOrBuilder {
      // Construct using com.daimler.mbprotokit.generated.Acp.VVA.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:proto.VVA)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.daimler.mbprotokit.generated.Acp.VVA();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.daimler.mbprotokit.generated.Acp.VVA other = (com.daimler.mbprotokit.generated.Acp.VVA) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.daimler.mbprotokit.generated.Acp.VVA.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto.VVA)
    private static final com.daimler.mbprotokit.generated.Acp.VVA DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VVA();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.daimler.mbprotokit.generated.Acp.VVA getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VVA> PARSER;

    public static com.google.protobuf.Parser<VVA> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VehicleAPIOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.VehicleAPI)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code proto.VehicleAPI}
   */
  public  static final class VehicleAPI extends
      com.google.protobuf.GeneratedMessageLite<
          VehicleAPI, VehicleAPI.Builder> implements
      // @@protoc_insertion_point(message_implements:proto.VehicleAPI)
      VehicleAPIOrBuilder {
    private VehicleAPI() {
    }
    /**
     * Protobuf enum {@code proto.VehicleAPI.CommandState}
     */
    public enum CommandState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN_COMMAND_STATE = 0;</code>
       */
      UNKNOWN_COMMAND_STATE(0),
      /**
       * <pre>
       * Command execution request is accepted and an asynchronous process is
       * being initialized.
       * </pre>
       *
       * <code>INITIATION = 1;</code>
       */
      INITIATION(1),
      /**
       * <pre>
       * Another process for the same vehicle and queue is active, the request has
       * been queued for later execution.
       * </pre>
       *
       * <code>ENQUEUED = 2;</code>
       */
      ENQUEUED(2),
      /**
       * <pre>
       * The process is currently being processed by the backend.
       * </pre>
       *
       * <code>PROCESSING = 3;</code>
       */
      PROCESSING(3),
      /**
       * <pre>
       * The backend currently waits for the vehicle to respond to the request.
       * </pre>
       *
       * <code>WAITING = 4;</code>
       */
      WAITING(4),
      /**
       * <pre>
       * The process has finished successfully.
       * </pre>
       *
       * <code>FINISHED = 5;</code>
       */
      FINISHED(5),
      /**
       * <pre>
       * There was an error while executing the command process.
       * </pre>
       *
       * <code>FAILED = 6;</code>
       */
      FAILED(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNOWN_COMMAND_STATE = 0;</code>
       */
      public static final int UNKNOWN_COMMAND_STATE_VALUE = 0;
      /**
       * <pre>
       * Command execution request is accepted and an asynchronous process is
       * being initialized.
       * </pre>
       *
       * <code>INITIATION = 1;</code>
       */
      public static final int INITIATION_VALUE = 1;
      /**
       * <pre>
       * Another process for the same vehicle and queue is active, the request has
       * been queued for later execution.
       * </pre>
       *
       * <code>ENQUEUED = 2;</code>
       */
      public static final int ENQUEUED_VALUE = 2;
      /**
       * <pre>
       * The process is currently being processed by the backend.
       * </pre>
       *
       * <code>PROCESSING = 3;</code>
       */
      public static final int PROCESSING_VALUE = 3;
      /**
       * <pre>
       * The backend currently waits for the vehicle to respond to the request.
       * </pre>
       *
       * <code>WAITING = 4;</code>
       */
      public static final int WAITING_VALUE = 4;
      /**
       * <pre>
       * The process has finished successfully.
       * </pre>
       *
       * <code>FINISHED = 5;</code>
       */
      public static final int FINISHED_VALUE = 5;
      /**
       * <pre>
       * There was an error while executing the command process.
       * </pre>
       *
       * <code>FAILED = 6;</code>
       */
      public static final int FAILED_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommandState valueOf(int value) {
        return forNumber(value);
      }

      public static CommandState forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_COMMAND_STATE;
          case 1: return INITIATION;
          case 2: return ENQUEUED;
          case 3: return PROCESSING;
          case 4: return WAITING;
          case 5: return FINISHED;
          case 6: return FAILED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CommandState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandState>() {
              public CommandState findValueByNumber(int number) {
                return CommandState.forNumber(number);
              }
            };

      private final int value;

      private CommandState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.VehicleAPI.CommandState)
    }

    /**
     * Protobuf enum {@code proto.VehicleAPI.AttributeStatus}
     */
    public enum AttributeStatus
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * Value is set and valid
       * </pre>
       *
       * <code>VALUE_SET = 0;</code>
       */
      VALUE_SET(0),
      /**
       * <pre>
       * Value has not yet been retrieved from vehicle (but sensor etc. should be available)
       * </pre>
       *
       * <code>VALUE_NOT_SET = 1;</code>
       */
      VALUE_NOT_SET(1),
      /**
       * <pre>
       * Value has been retrieved from vehicle but is invalid (marked as invalid by DaiVB backend)
       * </pre>
       *
       * <code>INVALID = 3;</code>
       */
      INVALID(3),
      /**
       * <pre>
       * Vehicle does not support this attribute (e.g. does not have the sensor etc.)
       * </pre>
       *
       * <code>NOT_AVAILABLE = 4;</code>
       */
      NOT_AVAILABLE(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Value is set and valid
       * </pre>
       *
       * <code>VALUE_SET = 0;</code>
       */
      public static final int VALUE_SET_VALUE = 0;
      /**
       * <pre>
       * Value has not yet been retrieved from vehicle (but sensor etc. should be available)
       * </pre>
       *
       * <code>VALUE_NOT_SET = 1;</code>
       */
      public static final int VALUE_NOT_SET_VALUE = 1;
      /**
       * <pre>
       * Value has been retrieved from vehicle but is invalid (marked as invalid by DaiVB backend)
       * </pre>
       *
       * <code>INVALID = 3;</code>
       */
      public static final int INVALID_VALUE = 3;
      /**
       * <pre>
       * Vehicle does not support this attribute (e.g. does not have the sensor etc.)
       * </pre>
       *
       * <code>NOT_AVAILABLE = 4;</code>
       */
      public static final int NOT_AVAILABLE_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AttributeStatus valueOf(int value) {
        return forNumber(value);
      }

      public static AttributeStatus forNumber(int value) {
        switch (value) {
          case 0: return VALUE_SET;
          case 1: return VALUE_NOT_SET;
          case 3: return INVALID;
          case 4: return NOT_AVAILABLE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AttributeStatus>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AttributeStatus> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AttributeStatus>() {
              public AttributeStatus findValueByNumber(int number) {
                return AttributeStatus.forNumber(number);
              }
            };

      private final int value;

      private AttributeStatus(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.VehicleAPI.AttributeStatus)
    }

    /**
     * Protobuf enum {@code proto.VehicleAPI.QueueType}
     */
    public enum QueueType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWNCOMMANDQUEUETYPE = 0;</code>
       */
      UNKNOWNCOMMANDQUEUETYPE(0),
      /**
       * <code>DOORS = 10;</code>
       */
      DOORS(10),
      /**
       * <code>AUXHEAT = 11;</code>
       */
      AUXHEAT(11),
      /**
       * <code>PRECOND = 12;</code>
       */
      PRECOND(12),
      /**
       * <code>CHARGEOPT = 13;</code>
       */
      CHARGEOPT(13),
      /**
       * <code>MAINTENANCE = 14;</code>
       */
      MAINTENANCE(14),
      /**
       * <code>TCU = 15;</code>
       */
      TCU(15),
      /**
       * <code>FEED = 16;</code>
       */
      FEED(16),
      /**
       * <code>SERVICEACTIVATION = 17;</code>
       */
      SERVICEACTIVATION(17),
      /**
       * <code>ATP = 18;</code>
       */
      ATP(18),
      /**
       * <code>ASSISTANCE = 19;</code>
       */
      ASSISTANCE(19),
      /**
       * <code>RACP = 20;</code>
       */
      RACP(20),
      /**
       * <code>WEEKPROFILE = 21;</code>
       */
      WEEKPROFILE(21),
      /**
       * <code>REMOTEDIAGNOSIS = 22;</code>
       */
      REMOTEDIAGNOSIS(22),
      /**
       * <pre>
       *(ALSO USED BY SIGPOS/RVF)
       * </pre>
       *
       * <code>FLSH = 23;</code>
       */
      FLSH(23),
      /**
       * <code>TEMPERATURE = 24;</code>
       */
      TEMPERATURE(24),
      /**
       * <code>TRIPCOMP = 25;</code>
       */
      TRIPCOMP(25),
      /**
       * <code>ENGINE = 26;</code>
       */
      ENGINE(26),
      /**
       * <code>THEFTALARM = 27;</code>
       */
      THEFTALARM(27),
      /**
       * <code>WINDOW = 28;</code>
       */
      WINDOW(28),
      /**
       * <code>HEADUNIT = 29;</code>
       */
      HEADUNIT(29),
      /**
       * <code>MECALL = 31;</code>
       */
      MECALL(31),
      /**
       * <code>IMMOBILIZER = 32;</code>
       */
      IMMOBILIZER(32),
      /**
       * <code>RENTALSIGNAL = 33;</code>
       */
      RENTALSIGNAL(33),
      /**
       * <pre>
       *(BLACKCHANNEL)
       * </pre>
       *
       * <code>BCF = 34;</code>
       */
      BCF(34),
      /**
       * <code>PLUGANDCHARGE = 35;</code>
       */
      PLUGANDCHARGE(35),
      /**
       * <code>CARSHARINGMODULE = 36;</code>
       */
      CARSHARINGMODULE(36),
      /**
       * <code>BATTERY = 37;</code>
       */
      BATTERY(37),
      /**
       * <code>ONBOARDFENCES = 38;</code>
       */
      ONBOARDFENCES(38),
      /**
       * <code>SPEEDFENCES = 39;</code>
       */
      SPEEDFENCES(39),
      /**
       * <code>CHARGINGTARIFFS = 40;</code>
       */
      CHARGINGTARIFFS(40),
      /**
       * <code>RTMCONFIG = 41;</code>
       */
      RTMCONFIG(41),
      /**
       * <code>MAINTENANCECOMPUTER = 42;</code>
       */
      MAINTENANCECOMPUTER(42),
      /**
       * <code>MECALL2 = 43;</code>
       */
      MECALL2(43),
      /**
       * <code>AUTOMATEDVALETPARKING = 44;</code>
       */
      AUTOMATEDVALETPARKING(44),
      /**
       * <code>CHARGECONTROL = 45;</code>
       */
      CHARGECONTROL(45),
      /**
       * <code>SPEEDALERT = 46;</code>
       */
      SPEEDALERT(46),
      /**
       * <code>CHARGINGBREAKCLOCKTIMER = 47;</code>
       */
      CHARGINGBREAKCLOCKTIMER(47),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>unknowncommandqueuetype = 0;</code>
       */
      public static final QueueType unknowncommandqueuetype = UNKNOWNCOMMANDQUEUETYPE;
      /**
       * <code>doors = 10;</code>
       */
      public static final QueueType doors = DOORS;
      /**
       * <code>auxheat = 11;</code>
       */
      public static final QueueType auxheat = AUXHEAT;
      /**
       * <code>precond = 12;</code>
       */
      public static final QueueType precond = PRECOND;
      /**
       * <code>chargeopt = 13;</code>
       */
      public static final QueueType chargeopt = CHARGEOPT;
      /**
       * <code>maintenance = 14;</code>
       */
      public static final QueueType maintenance = MAINTENANCE;
      /**
       * <code>tcu = 15;</code>
       */
      public static final QueueType tcu = TCU;
      /**
       * <code>feed = 16;</code>
       */
      public static final QueueType feed = FEED;
      /**
       * <code>serviceactivation = 17;</code>
       */
      public static final QueueType serviceactivation = SERVICEACTIVATION;
      /**
       * <code>atp = 18;</code>
       */
      public static final QueueType atp = ATP;
      /**
       * <code>assistance = 19;</code>
       */
      public static final QueueType assistance = ASSISTANCE;
      /**
       * <code>racp = 20;</code>
       */
      public static final QueueType racp = RACP;
      /**
       * <code>weekprofile = 21;</code>
       */
      public static final QueueType weekprofile = WEEKPROFILE;
      /**
       * <code>remotediagnosis = 22;</code>
       */
      public static final QueueType remotediagnosis = REMOTEDIAGNOSIS;
      /**
       * <pre>
       *(also used by sigpos/RVF)
       * </pre>
       *
       * <code>flsh = 23;</code>
       */
      public static final QueueType flsh = FLSH;
      /**
       * <code>temperature = 24;</code>
       */
      public static final QueueType temperature = TEMPERATURE;
      /**
       * <code>tripcomp = 25;</code>
       */
      public static final QueueType tripcomp = TRIPCOMP;
      /**
       * <code>engine = 26;</code>
       */
      public static final QueueType engine = ENGINE;
      /**
       * <code>theftalarm = 27;</code>
       */
      public static final QueueType theftalarm = THEFTALARM;
      /**
       * <code>window = 28;</code>
       */
      public static final QueueType window = WINDOW;
      /**
       * <code>headunit = 29;</code>
       */
      public static final QueueType headunit = HEADUNIT;
      /**
       * <code>mecall = 31;</code>
       */
      public static final QueueType mecall = MECALL;
      /**
       * <code>immobilizer = 32;</code>
       */
      public static final QueueType immobilizer = IMMOBILIZER;
      /**
       * <code>rentalsignal = 33;</code>
       */
      public static final QueueType rentalsignal = RENTALSIGNAL;
      /**
       * <pre>
       *(blackchannel)
       * </pre>
       *
       * <code>bcf = 34;</code>
       */
      public static final QueueType bcf = BCF;
      /**
       * <code>plugandcharge = 35;</code>
       */
      public static final QueueType plugandcharge = PLUGANDCHARGE;
      /**
       * <code>carsharingmodule = 36;</code>
       */
      public static final QueueType carsharingmodule = CARSHARINGMODULE;
      /**
       * <code>battery = 37;</code>
       */
      public static final QueueType battery = BATTERY;
      /**
       * <code>onboardfences = 38;</code>
       */
      public static final QueueType onboardfences = ONBOARDFENCES;
      /**
       * <code>speedfences = 39;</code>
       */
      public static final QueueType speedfences = SPEEDFENCES;
      /**
       * <code>chargingtariffs = 40;</code>
       */
      public static final QueueType chargingtariffs = CHARGINGTARIFFS;
      /**
       * <code>rtmconfig = 41;</code>
       */
      public static final QueueType rtmconfig = RTMCONFIG;
      /**
       * <code>maintenancecomputer = 42;</code>
       */
      public static final QueueType maintenancecomputer = MAINTENANCECOMPUTER;
      /**
       * <code>mecall2 = 43;</code>
       */
      public static final QueueType mecall2 = MECALL2;
      /**
       * <code>automatedvaletparking = 44;</code>
       */
      public static final QueueType automatedvaletparking = AUTOMATEDVALETPARKING;
      /**
       * <code>chargecontrol = 45;</code>
       */
      public static final QueueType chargecontrol = CHARGECONTROL;
      /**
       * <code>speedalert = 46;</code>
       */
      public static final QueueType speedalert = SPEEDALERT;
      /**
       * <code>chargingbreakclocktimer = 47;</code>
       */
      public static final QueueType chargingbreakclocktimer = CHARGINGBREAKCLOCKTIMER;
      /**
       * <code>UNKNOWNCOMMANDQUEUETYPE = 0;</code>
       */
      public static final int UNKNOWNCOMMANDQUEUETYPE_VALUE = 0;
      /**
       * <code>DOORS = 10;</code>
       */
      public static final int DOORS_VALUE = 10;
      /**
       * <code>AUXHEAT = 11;</code>
       */
      public static final int AUXHEAT_VALUE = 11;
      /**
       * <code>PRECOND = 12;</code>
       */
      public static final int PRECOND_VALUE = 12;
      /**
       * <code>CHARGEOPT = 13;</code>
       */
      public static final int CHARGEOPT_VALUE = 13;
      /**
       * <code>MAINTENANCE = 14;</code>
       */
      public static final int MAINTENANCE_VALUE = 14;
      /**
       * <code>TCU = 15;</code>
       */
      public static final int TCU_VALUE = 15;
      /**
       * <code>FEED = 16;</code>
       */
      public static final int FEED_VALUE = 16;
      /**
       * <code>SERVICEACTIVATION = 17;</code>
       */
      public static final int SERVICEACTIVATION_VALUE = 17;
      /**
       * <code>ATP = 18;</code>
       */
      public static final int ATP_VALUE = 18;
      /**
       * <code>ASSISTANCE = 19;</code>
       */
      public static final int ASSISTANCE_VALUE = 19;
      /**
       * <code>RACP = 20;</code>
       */
      public static final int RACP_VALUE = 20;
      /**
       * <code>WEEKPROFILE = 21;</code>
       */
      public static final int WEEKPROFILE_VALUE = 21;
      /**
       * <code>REMOTEDIAGNOSIS = 22;</code>
       */
      public static final int REMOTEDIAGNOSIS_VALUE = 22;
      /**
       * <pre>
       *(ALSO USED BY SIGPOS/RVF)
       * </pre>
       *
       * <code>FLSH = 23;</code>
       */
      public static final int FLSH_VALUE = 23;
      /**
       * <code>TEMPERATURE = 24;</code>
       */
      public static final int TEMPERATURE_VALUE = 24;
      /**
       * <code>TRIPCOMP = 25;</code>
       */
      public static final int TRIPCOMP_VALUE = 25;
      /**
       * <code>ENGINE = 26;</code>
       */
      public static final int ENGINE_VALUE = 26;
      /**
       * <code>THEFTALARM = 27;</code>
       */
      public static final int THEFTALARM_VALUE = 27;
      /**
       * <code>WINDOW = 28;</code>
       */
      public static final int WINDOW_VALUE = 28;
      /**
       * <code>HEADUNIT = 29;</code>
       */
      public static final int HEADUNIT_VALUE = 29;
      /**
       * <code>MECALL = 31;</code>
       */
      public static final int MECALL_VALUE = 31;
      /**
       * <code>IMMOBILIZER = 32;</code>
       */
      public static final int IMMOBILIZER_VALUE = 32;
      /**
       * <code>RENTALSIGNAL = 33;</code>
       */
      public static final int RENTALSIGNAL_VALUE = 33;
      /**
       * <pre>
       *(BLACKCHANNEL)
       * </pre>
       *
       * <code>BCF = 34;</code>
       */
      public static final int BCF_VALUE = 34;
      /**
       * <code>PLUGANDCHARGE = 35;</code>
       */
      public static final int PLUGANDCHARGE_VALUE = 35;
      /**
       * <code>CARSHARINGMODULE = 36;</code>
       */
      public static final int CARSHARINGMODULE_VALUE = 36;
      /**
       * <code>BATTERY = 37;</code>
       */
      public static final int BATTERY_VALUE = 37;
      /**
       * <code>ONBOARDFENCES = 38;</code>
       */
      public static final int ONBOARDFENCES_VALUE = 38;
      /**
       * <code>SPEEDFENCES = 39;</code>
       */
      public static final int SPEEDFENCES_VALUE = 39;
      /**
       * <code>CHARGINGTARIFFS = 40;</code>
       */
      public static final int CHARGINGTARIFFS_VALUE = 40;
      /**
       * <code>RTMCONFIG = 41;</code>
       */
      public static final int RTMCONFIG_VALUE = 41;
      /**
       * <code>MAINTENANCECOMPUTER = 42;</code>
       */
      public static final int MAINTENANCECOMPUTER_VALUE = 42;
      /**
       * <code>MECALL2 = 43;</code>
       */
      public static final int MECALL2_VALUE = 43;
      /**
       * <code>AUTOMATEDVALETPARKING = 44;</code>
       */
      public static final int AUTOMATEDVALETPARKING_VALUE = 44;
      /**
       * <code>CHARGECONTROL = 45;</code>
       */
      public static final int CHARGECONTROL_VALUE = 45;
      /**
       * <code>SPEEDALERT = 46;</code>
       */
      public static final int SPEEDALERT_VALUE = 46;
      /**
       * <code>CHARGINGBREAKCLOCKTIMER = 47;</code>
       */
      public static final int CHARGINGBREAKCLOCKTIMER_VALUE = 47;
      /**
       * <code>unknowncommandqueuetype = 0;</code>
       */
      public static final int unknowncommandqueuetype_VALUE = 0;
      /**
       * <code>doors = 10;</code>
       */
      public static final int doors_VALUE = 10;
      /**
       * <code>auxheat = 11;</code>
       */
      public static final int auxheat_VALUE = 11;
      /**
       * <code>precond = 12;</code>
       */
      public static final int precond_VALUE = 12;
      /**
       * <code>chargeopt = 13;</code>
       */
      public static final int chargeopt_VALUE = 13;
      /**
       * <code>maintenance = 14;</code>
       */
      public static final int maintenance_VALUE = 14;
      /**
       * <code>tcu = 15;</code>
       */
      public static final int tcu_VALUE = 15;
      /**
       * <code>feed = 16;</code>
       */
      public static final int feed_VALUE = 16;
      /**
       * <code>serviceactivation = 17;</code>
       */
      public static final int serviceactivation_VALUE = 17;
      /**
       * <code>atp = 18;</code>
       */
      public static final int atp_VALUE = 18;
      /**
       * <code>assistance = 19;</code>
       */
      public static final int assistance_VALUE = 19;
      /**
       * <code>racp = 20;</code>
       */
      public static final int racp_VALUE = 20;
      /**
       * <code>weekprofile = 21;</code>
       */
      public static final int weekprofile_VALUE = 21;
      /**
       * <code>remotediagnosis = 22;</code>
       */
      public static final int remotediagnosis_VALUE = 22;
      /**
       * <pre>
       *(also used by sigpos/RVF)
       * </pre>
       *
       * <code>flsh = 23;</code>
       */
      public static final int flsh_VALUE = 23;
      /**
       * <code>temperature = 24;</code>
       */
      public static final int temperature_VALUE = 24;
      /**
       * <code>tripcomp = 25;</code>
       */
      public static final int tripcomp_VALUE = 25;
      /**
       * <code>engine = 26;</code>
       */
      public static final int engine_VALUE = 26;
      /**
       * <code>theftalarm = 27;</code>
       */
      public static final int theftalarm_VALUE = 27;
      /**
       * <code>window = 28;</code>
       */
      public static final int window_VALUE = 28;
      /**
       * <code>headunit = 29;</code>
       */
      public static final int headunit_VALUE = 29;
      /**
       * <code>mecall = 31;</code>
       */
      public static final int mecall_VALUE = 31;
      /**
       * <code>immobilizer = 32;</code>
       */
      public static final int immobilizer_VALUE = 32;
      /**
       * <code>rentalsignal = 33;</code>
       */
      public static final int rentalsignal_VALUE = 33;
      /**
       * <pre>
       *(blackchannel)
       * </pre>
       *
       * <code>bcf = 34;</code>
       */
      public static final int bcf_VALUE = 34;
      /**
       * <code>plugandcharge = 35;</code>
       */
      public static final int plugandcharge_VALUE = 35;
      /**
       * <code>carsharingmodule = 36;</code>
       */
      public static final int carsharingmodule_VALUE = 36;
      /**
       * <code>battery = 37;</code>
       */
      public static final int battery_VALUE = 37;
      /**
       * <code>onboardfences = 38;</code>
       */
      public static final int onboardfences_VALUE = 38;
      /**
       * <code>speedfences = 39;</code>
       */
      public static final int speedfences_VALUE = 39;
      /**
       * <code>chargingtariffs = 40;</code>
       */
      public static final int chargingtariffs_VALUE = 40;
      /**
       * <code>rtmconfig = 41;</code>
       */
      public static final int rtmconfig_VALUE = 41;
      /**
       * <code>maintenancecomputer = 42;</code>
       */
      public static final int maintenancecomputer_VALUE = 42;
      /**
       * <code>mecall2 = 43;</code>
       */
      public static final int mecall2_VALUE = 43;
      /**
       * <code>automatedvaletparking = 44;</code>
       */
      public static final int automatedvaletparking_VALUE = 44;
      /**
       * <code>chargecontrol = 45;</code>
       */
      public static final int chargecontrol_VALUE = 45;
      /**
       * <code>speedalert = 46;</code>
       */
      public static final int speedalert_VALUE = 46;
      /**
       * <code>chargingbreakclocktimer = 47;</code>
       */
      public static final int chargingbreakclocktimer_VALUE = 47;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static QueueType valueOf(int value) {
        return forNumber(value);
      }

      public static QueueType forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWNCOMMANDQUEUETYPE;
          case 10: return DOORS;
          case 11: return AUXHEAT;
          case 12: return PRECOND;
          case 13: return CHARGEOPT;
          case 14: return MAINTENANCE;
          case 15: return TCU;
          case 16: return FEED;
          case 17: return SERVICEACTIVATION;
          case 18: return ATP;
          case 19: return ASSISTANCE;
          case 20: return RACP;
          case 21: return WEEKPROFILE;
          case 22: return REMOTEDIAGNOSIS;
          case 23: return FLSH;
          case 24: return TEMPERATURE;
          case 25: return TRIPCOMP;
          case 26: return ENGINE;
          case 27: return THEFTALARM;
          case 28: return WINDOW;
          case 29: return HEADUNIT;
          case 31: return MECALL;
          case 32: return IMMOBILIZER;
          case 33: return RENTALSIGNAL;
          case 34: return BCF;
          case 35: return PLUGANDCHARGE;
          case 36: return CARSHARINGMODULE;
          case 37: return BATTERY;
          case 38: return ONBOARDFENCES;
          case 39: return SPEEDFENCES;
          case 40: return CHARGINGTARIFFS;
          case 41: return RTMCONFIG;
          case 42: return MAINTENANCECOMPUTER;
          case 43: return MECALL2;
          case 44: return AUTOMATEDVALETPARKING;
          case 45: return CHARGECONTROL;
          case 46: return SPEEDALERT;
          case 47: return CHARGINGBREAKCLOCKTIMER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<QueueType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          QueueType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<QueueType>() {
              public QueueType findValueByNumber(int number) {
                return QueueType.forNumber(number);
              }
            };

      private final int value;

      private QueueType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.VehicleAPI.QueueType)
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.daimler.mbprotokit.generated.Acp.VehicleAPI prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code proto.VehicleAPI}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.daimler.mbprotokit.generated.Acp.VehicleAPI, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.VehicleAPI)
        com.daimler.mbprotokit.generated.Acp.VehicleAPIOrBuilder {
      // Construct using com.daimler.mbprotokit.generated.Acp.VehicleAPI.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:proto.VehicleAPI)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.daimler.mbprotokit.generated.Acp.VehicleAPI();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.daimler.mbprotokit.generated.Acp.VehicleAPI other = (com.daimler.mbprotokit.generated.Acp.VehicleAPI) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.daimler.mbprotokit.generated.Acp.VehicleAPI.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto.VehicleAPI)
    private static final com.daimler.mbprotokit.generated.Acp.VehicleAPI DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VehicleAPI();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.daimler.mbprotokit.generated.Acp.VehicleAPI getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VehicleAPI> PARSER;

    public static com.google.protobuf.Parser<VehicleAPI> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ACPOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.ACP)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code proto.ACP}
   */
  public  static final class ACP extends
      com.google.protobuf.GeneratedMessageLite<
          ACP, ACP.Builder> implements
      // @@protoc_insertion_point(message_implements:proto.ACP)
      ACPOrBuilder {
    private ACP() {
    }
    /**
     * Protobuf enum {@code proto.ACP.CommandType}
     */
    public enum CommandType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWNCOMMANDTYPE = 0;</code>
       */
      UNKNOWNCOMMANDTYPE(0),
      /**
       * <code>DOORSLOCK = 100;</code>
       */
      DOORSLOCK(100),
      /**
       * <code>DOORSUNLOCK = 110;</code>
       */
      DOORSUNLOCK(110),
      /**
       * <code>TRUNKUNLOCK = 115;</code>
       */
      TRUNKUNLOCK(115),
      /**
       * <code>FUELFLAPUNLOCK = 116;</code>
       */
      FUELFLAPUNLOCK(116),
      /**
       * <code>CHARGEFLAPUNLOCK = 117;</code>
       */
      CHARGEFLAPUNLOCK(117),
      /**
       * <code>CHARGECOUPLERUNLOCK = 118;</code>
       */
      CHARGECOUPLERUNLOCK(118),
      /**
       * <code>DOORSPREPARERENTAL = 120;</code>
       */
      DOORSPREPARERENTAL(120),
      /**
       * <code>DOORSSECUREVEHICLE = 130;</code>
       */
      DOORSSECUREVEHICLE(130),
      /**
       * <code>AUXHEATSTART = 300;</code>
       */
      AUXHEATSTART(300),
      /**
       * <code>AUXHEATSTOP = 310;</code>
       */
      AUXHEATSTOP(310),
      /**
       * <code>AUXHEATCONFIGURE = 320;</code>
       */
      AUXHEATCONFIGURE(320),
      /**
       * <code>TEMPERATURECONFIGURE = 350;</code>
       */
      TEMPERATURECONFIGURE(350),
      /**
       * <code>WEEKPROFILECONFIGURE = 360;</code>
       */
      WEEKPROFILECONFIGURE(360),
      /**
       * <code>WEEKPROFILEV2CONFIGURE = 370;</code>
       */
      WEEKPROFILEV2CONFIGURE(370),
      /**
       * <code>PRECONDSTART = 400;</code>
       */
      PRECONDSTART(400),
      /**
       * <code>PRECONDSTOP = 410;</code>
       */
      PRECONDSTOP(410),
      /**
       * <code>PRECONDCONFIGURE = 420;</code>
       */
      PRECONDCONFIGURE(420),
      /**
       * <code>PRECONDCONFIGURESEATS = 425;</code>
       */
      PRECONDCONFIGURESEATS(425),
      /**
       * <code>CHARGEOPTCONFIGURE = 430;</code>
       */
      CHARGEOPTCONFIGURE(430),
      /**
       * <code>CHARGEOPTSTART = 440;</code>
       */
      CHARGEOPTSTART(440),
      /**
       * <code>CHARGEOPTSTOP = 450;</code>
       */
      CHARGEOPTSTOP(450),
      /**
       * <code>FEEDPOI = 500;</code>
       */
      FEEDPOI(500),
      /**
       * <code>FEEDFREETEXT = 510;</code>
       */
      FEEDFREETEXT(510),
      /**
       * <code>ENGINESTART = 550;</code>
       */
      ENGINESTART(550),
      /**
       * <code>ENGINESTOP = 560;</code>
       */
      ENGINESTOP(560),
      /**
       * <code>ENGINEAVPSTART = 570;</code>
       */
      ENGINEAVPSTART(570),
      /**
       * <code>TCUWAKEUP = 600;</code>
       */
      TCUWAKEUP(600),
      /**
       * <code>TCUSWUPDATE = 610;</code>
       */
      TCUSWUPDATE(610),
      /**
       * <code>TCURCSRESET = 620;</code>
       */
      TCURCSRESET(620),
      /**
       * <code>TCUINTERROGATION = 630;</code>
       */
      TCUINTERROGATION(630),
      /**
       * <code>SPEEDALERTSTART = 710;</code>
       */
      SPEEDALERTSTART(710),
      /**
       * <code>SPEEDALERTSTOP = 720;</code>
       */
      SPEEDALERTSTOP(720),
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>FLSHSTART = 750;</code>
       */
      FLSHSTART(750),
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>FLSHSTOP = 760;</code>
       */
      FLSHSTOP(760),
      /**
       * <code>SIGPOSSTART = 770;</code>
       */
      SIGPOSSTART(770),
      /**
       * <code>CONTRACTCONFIGURE = 800;</code>
       */
      CONTRACTCONFIGURE(800),
      /**
       * <code>CONTRACTREMOVE = 810;</code>
       */
      CONTRACTREMOVE(810),
      /**
       * <code>ROOTCONFIGURE = 820;</code>
       */
      ROOTCONFIGURE(820),
      /**
       * <code>ROOTREMOVE = 830;</code>
       */
      ROOTREMOVE(830),
      /**
       * <pre>
       * RESET TRIPCOMP
       * </pre>
       *
       * <code>TRIPCOMP = 850;</code>
       */
      TRIPCOMP(850),
      /**
       * <code>MAINTENANCECONFIGURE = 930;</code>
       */
      MAINTENANCECONFIGURE(930),
      /**
       * <code>MAINTENANCECOMPUTEROFFSET = 931;</code>
       */
      MAINTENANCECOMPUTEROFFSET(931),
      /**
       * <code>SHORTTESTEXECUTE = 935;</code>
       */
      SHORTTESTEXECUTE(935),
      /**
       * <code>SERVICEACTIVATIONCONFIGURE = 940;</code>
       */
      SERVICEACTIVATIONCONFIGURE(940),
      /**
       * <code>DC2SERVICEACTIVATIONCONFIGURE = 945;</code>
       */
      DC2SERVICEACTIVATIONCONFIGURE(945),
      /**
       * <pre>
       *(TEST COMMAND)
       * </pre>
       *
       * <code>DC2RAWDOWNLOAD = 950;</code>
       */
      DC2RAWDOWNLOAD(950),
      /**
       * <pre>
       * (DC2+)
       * </pre>
       *
       * <code>APPLICATIONCONFIGURATION = 955;</code>
       */
      APPLICATIONCONFIGURATION(955),
      /**
       * <pre>
       * (TEST COMMAND)
       * </pre>
       *
       * <code>DC2STARTTRACKING = 960;</code>
       */
      DC2STARTTRACKING(960),
      /**
       * <code>ATPSEQUENCE = 990;</code>
       */
      ATPSEQUENCE(990),
      /**
       * <code>THEFTALARMTOGGLEINTERIOR = 1000;</code>
       */
      THEFTALARMTOGGLEINTERIOR(1000),
      /**
       * <code>THEFTALARMTOGGLETOW = 1010;</code>
       */
      THEFTALARMTOGGLETOW(1010),
      /**
       * <code>THEFTALARMSELECTINTERIORTOW = 1020;</code>
       */
      THEFTALARMSELECTINTERIORTOW(1020),
      /**
       * <code>THEFTALARMDESELECTINTERIORTOW = 1030;</code>
       */
      THEFTALARMDESELECTINTERIORTOW(1030),
      /**
       * <code>THEFTALARMSTOP = 1040;</code>
       */
      THEFTALARMSTOP(1040),
      /**
       * <code>WINDOWOPEN = 1100;</code>
       */
      WINDOWOPEN(1100),
      /**
       * <code>WINDOWCLOSE = 1110;</code>
       */
      WINDOWCLOSE(1110),
      /**
       * <code>WINDOWVENTILATE = 1120;</code>
       */
      WINDOWVENTILATE(1120),
      /**
       * <code>WINDOWMOVE = 1121;</code>
       */
      WINDOWMOVE(1121),
      /**
       * <code>ROOFOPEN = 1130;</code>
       */
      ROOFOPEN(1130),
      /**
       * <code>ROOFCLOSE = 1140;</code>
       */
      ROOFCLOSE(1140),
      /**
       * <code>ROOFLIFT = 1150;</code>
       */
      ROOFLIFT(1150),
      /**
       * <code>ROOFMOVE = 1151;</code>
       */
      ROOFMOVE(1151),
      /**
       * <code>BATTERYMAXSOC = 2000;</code>
       */
      BATTERYMAXSOC(2000),
      /**
       * <code>BATTERYCHARGEPROGRAM = 2010;</code>
       */
      BATTERYCHARGEPROGRAM(2010),
      /**
       * <code>CHARGEPROGRAMCONFIGURE = 2020;</code>
       */
      CHARGEPROGRAMCONFIGURE(2020),
      /**
       * <code>ONBOARDFENCESCREATE = 2100;</code>
       */
      ONBOARDFENCESCREATE(2100),
      /**
       * <code>ONBOARDFENCESUPDATE = 2110;</code>
       */
      ONBOARDFENCESUPDATE(2110),
      /**
       * <code>ONBOARDFENCESDELETE = 2120;</code>
       */
      ONBOARDFENCESDELETE(2120),
      /**
       * <code>SPEEDFENCESCREATE = 2200;</code>
       */
      SPEEDFENCESCREATE(2200),
      /**
       * <code>SPEEDFENCESUPDATE = 2210;</code>
       */
      SPEEDFENCESUPDATE(2210),
      /**
       * <code>SPEEDFENCESDELETE = 2220;</code>
       */
      SPEEDFENCESDELETE(2220),
      /**
       * <code>CHARGINGTARIFFSCREATE = 2300;</code>
       */
      CHARGINGTARIFFSCREATE(2300),
      /**
       * <code>CHARGINGTARIFFSUPDATE = 2310;</code>
       */
      CHARGINGTARIFFSUPDATE(2310),
      /**
       * <code>CHARGINGTARIFFSDELETE = 2320;</code>
       */
      CHARGINGTARIFFSDELETE(2320),
      /**
       * <code>THEFTALARMSTART = 2500;</code>
       */
      THEFTALARMSTART(2500),
      /**
       * <code>THEFTALARMSELECTINTERIOR = 2510;</code>
       */
      THEFTALARMSELECTINTERIOR(2510),
      /**
       * <code>THEFTALARMDESELECTINTERIOR = 2520;</code>
       */
      THEFTALARMDESELECTINTERIOR(2520),
      /**
       * <code>THEFTALARMSELECTTOW = 2530;</code>
       */
      THEFTALARMSELECTTOW(2530),
      /**
       * <code>THEFTALARMDESELECTTOW = 2540;</code>
       */
      THEFTALARMDESELECTTOW(2540),
      /**
       * <code>THEFTALARMSELECTDAMAGEDETECTION = 2550;</code>
       */
      THEFTALARMSELECTDAMAGEDETECTION(2550),
      /**
       * <code>THEFTALARMDESELECTDAMAGEDETECTION = 2560;</code>
       */
      THEFTALARMDESELECTDAMAGEDETECTION(2560),
      /**
       * <code>THEFTALARMCONFIRMDAMAGEDETECTION = 2570;</code>
       */
      THEFTALARMCONFIRMDAMAGEDETECTION(2570),
      /**
       * <code>MECALL2START = 2600;</code>
       */
      MECALL2START(2600),
      /**
       * <code>UDXTRIGGERSYNCHRONIZATION = 1200;</code>
       */
      UDXTRIGGERSYNCHRONIZATION(1200),
      /**
       * <code>UDXACTIVEUSERPROFILE = 1210;</code>
       */
      UDXACTIVEUSERPROFILE(1210),
      /**
       * <code>UDXRESETUSERDATA = 1220;</code>
       */
      UDXRESETUSERDATA(1220),
      /**
       * <code>USERPROFSYNCH = 1230;</code>
       */
      USERPROFSYNCH(1230),
      /**
       * <code>USERDATARESET = 1240;</code>
       */
      USERDATARESET(1240),
      /**
       * <code>PROFACTIVATIONSNAP = 1250;</code>
       */
      PROFACTIVATIONSNAP(1250),
      /**
       * <code>PROFACTIVATIONDIRECT = 1255;</code>
       */
      PROFACTIVATIONDIRECT(1255),
      /**
       * <code>SOFTWAREUPDATE = 1260;</code>
       */
      SOFTWAREUPDATE(1260),
      /**
       * <code>PUSHNOTIFICATION = 1270;</code>
       */
      PUSHNOTIFICATION(1270),
      /**
       * <code>MECALLCOMMAND = 1310;</code>
       */
      MECALLCOMMAND(1310),
      /**
       * <code>PRECONDSTARTRCS = 1400;</code>
       */
      PRECONDSTARTRCS(1400),
      /**
       * <code>PRECONDSTOPRCS = 1410;</code>
       */
      PRECONDSTOPRCS(1410),
      /**
       * <code>PRECONDCONFIGURERCS = 1420;</code>
       */
      PRECONDCONFIGURERCS(1420),
      /**
       * <code>TCUCONFIGURE = 1430;</code>
       */
      TCUCONFIGURE(1430),
      /**
       * <code>EDISONSERVICEACTIVATION = 1431;</code>
       */
      EDISONSERVICEACTIVATION(1431),
      /**
       * <code>TESTSEQUENCE = 1432;</code>
       */
      TESTSEQUENCE(1432),
      /**
       * <code>PRECONDCONFIGURERACP = 1433;</code>
       */
      PRECONDCONFIGURERACP(1433),
      /**
       * <code>CHARGEOPTCONFIGURERACP = 1434;</code>
       */
      CHARGEOPTCONFIGURERACP(1434),
      /**
       * <code>TARIFFTABLEDOWNLOAD = 1435;</code>
       */
      TARIFFTABLEDOWNLOAD(1435),
      /**
       * <code>PRECONDSTARTRACP = 1436;</code>
       */
      PRECONDSTARTRACP(1436),
      /**
       * <code>PRECONDSTOPRACP = 1437;</code>
       */
      PRECONDSTOPRACP(1437),
      /**
       * <code>ROOTCERTIFICATEREMOVE = 1438;</code>
       */
      ROOTCERTIFICATEREMOVE(1438),
      /**
       * <code>ONREQUESTPROBEUPLOAD = 1439;</code>
       */
      ONREQUESTPROBEUPLOAD(1439),
      /**
       * <code>ROOTCERTIFICATEDOWNLOAD = 1440;</code>
       */
      ROOTCERTIFICATEDOWNLOAD(1440),
      /**
       * <code>CONTRACTCERTIFICATEREMOVE = 1441;</code>
       */
      CONTRACTCERTIFICATEREMOVE(1441),
      /**
       * <code>CONTRACTCERTIFICATEDOWNLOAD = 1442;</code>
       */
      CONTRACTCERTIFICATEDOWNLOAD(1442),
      /**
       * <code>PROBECONFIGURATIONUPDATE = 1443;</code>
       */
      PROBECONFIGURATIONUPDATE(1443),
      /**
       * <code>RDIAGDELETEECU = 1500;</code>
       */
      RDIAGDELETEECU(1500),
      /**
       * <code>RDIAGSTATUSREPORT = 1501;</code>
       */
      RDIAGSTATUSREPORT(1501),
      /**
       * <code>RDIAGEXECUTION = 1502;</code>
       */
      RDIAGEXECUTION(1502),
      /**
       * <code>IMMOBILIZERCHALLENGE = 1600;</code>
       */
      IMMOBILIZERCHALLENGE(1600),
      /**
       * <code>IMMOBILIZERSEARCHKEYLINE = 1610;</code>
       */
      IMMOBILIZERSEARCHKEYLINE(1610),
      /**
       * <code>IMMOBILIZERRELEASEKEYLINE = 1620;</code>
       */
      IMMOBILIZERRELEASEKEYLINE(1620),
      /**
       * <code>IMMOBILIZERLOCKKEYLINE = 1630;</code>
       */
      IMMOBILIZERLOCKKEYLINE(1630),
      /**
       * <code>IMMOBILIZERLOCKVEHICLE = 1631;</code>
       */
      IMMOBILIZERLOCKVEHICLE(1631),
      /**
       * <code>IMMOBILIZERRELEASEVEHICLE = 1621;</code>
       */
      IMMOBILIZERRELEASEVEHICLE(1621),
      /**
       * <code>SETRENTALSIGNAL = 1700;</code>
       */
      SETRENTALSIGNAL(1700),
      /**
       * <code>BLACKCHANNELDOWNLOAD = 1800;</code>
       */
      BLACKCHANNELDOWNLOAD(1800),
      /**
       * <code>BLACKCHANNELUPLOAD = 1810;</code>
       */
      BLACKCHANNELUPLOAD(1810),
      /**
       * <code>CONFIGURECSM = 1900;</code>
       */
      CONFIGURECSM(1900),
      /**
       * <code>UPDATEVEHICLEINFO = 1901;</code>
       */
      UPDATEVEHICLEINFO(1901),
      /**
       * <code>RELAYMESSAGETOCSM = 1902;</code>
       */
      RELAYMESSAGETOCSM(1902),
      /**
       * <code>RELAYRENTALREQUESTTOCSB = 1903;</code>
       */
      RELAYRENTALREQUESTTOCSB(1903),
      /**
       * <code>RTMDOWNLOADCONFIG = 2400;</code>
       */
      RTMDOWNLOADCONFIG(2400),
      /**
       * <code>RTMREADCONFIG = 2410;</code>
       */
      RTMREADCONFIG(2410),
      /**
       * <code>AVPACTIVATE = 2700;</code>
       */
      AVPACTIVATE(2700),
      /**
       * <code>CHARGECONTROLCONFIGURE = 2800;</code>
       */
      CHARGECONTROLCONFIGURE(2800),
      /**
       * <code>CHARGINGBREAKCLOCKTIMERCONFIGURE = 3000;</code>
       */
      CHARGINGBREAKCLOCKTIMERCONFIGURE(3000),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>unknownCommandType = 0;</code>
       */
      public static final CommandType unknownCommandType = UNKNOWNCOMMANDTYPE;
      /**
       * <code>doorsLock = 100;</code>
       */
      public static final CommandType doorsLock = DOORSLOCK;
      /**
       * <code>doorsUnlock = 110;</code>
       */
      public static final CommandType doorsUnlock = DOORSUNLOCK;
      /**
       * <code>trunkUnlock = 115;</code>
       */
      public static final CommandType trunkUnlock = TRUNKUNLOCK;
      /**
       * <code>fuelflapUnlock = 116;</code>
       */
      public static final CommandType fuelflapUnlock = FUELFLAPUNLOCK;
      /**
       * <code>chargeflapUnlock = 117;</code>
       */
      public static final CommandType chargeflapUnlock = CHARGEFLAPUNLOCK;
      /**
       * <code>chargecouplerUnlock = 118;</code>
       */
      public static final CommandType chargecouplerUnlock = CHARGECOUPLERUNLOCK;
      /**
       * <code>doorsPrepareRental = 120;</code>
       */
      public static final CommandType doorsPrepareRental = DOORSPREPARERENTAL;
      /**
       * <code>doorsSecureVehicle = 130;</code>
       */
      public static final CommandType doorsSecureVehicle = DOORSSECUREVEHICLE;
      /**
       * <code>auxheatStart = 300;</code>
       */
      public static final CommandType auxheatStart = AUXHEATSTART;
      /**
       * <code>auxheatStop = 310;</code>
       */
      public static final CommandType auxheatStop = AUXHEATSTOP;
      /**
       * <code>auxheatConfigure = 320;</code>
       */
      public static final CommandType auxheatConfigure = AUXHEATCONFIGURE;
      /**
       * <code>temperatureConfigure = 350;</code>
       */
      public static final CommandType temperatureConfigure = TEMPERATURECONFIGURE;
      /**
       * <code>weekprofileConfigure = 360;</code>
       */
      public static final CommandType weekprofileConfigure = WEEKPROFILECONFIGURE;
      /**
       * <code>weekprofileV2Configure = 370;</code>
       */
      public static final CommandType weekprofileV2Configure = WEEKPROFILEV2CONFIGURE;
      /**
       * <code>precondStart = 400;</code>
       */
      public static final CommandType precondStart = PRECONDSTART;
      /**
       * <code>precondStop = 410;</code>
       */
      public static final CommandType precondStop = PRECONDSTOP;
      /**
       * <code>precondConfigure = 420;</code>
       */
      public static final CommandType precondConfigure = PRECONDCONFIGURE;
      /**
       * <code>precondConfigureSeats = 425;</code>
       */
      public static final CommandType precondConfigureSeats = PRECONDCONFIGURESEATS;
      /**
       * <code>chargeoptConfigure = 430;</code>
       */
      public static final CommandType chargeoptConfigure = CHARGEOPTCONFIGURE;
      /**
       * <code>chargeoptStart = 440;</code>
       */
      public static final CommandType chargeoptStart = CHARGEOPTSTART;
      /**
       * <code>chargeoptStop = 450;</code>
       */
      public static final CommandType chargeoptStop = CHARGEOPTSTOP;
      /**
       * <code>feedPoi = 500;</code>
       */
      public static final CommandType feedPoi = FEEDPOI;
      /**
       * <code>feedFreetext = 510;</code>
       */
      public static final CommandType feedFreetext = FEEDFREETEXT;
      /**
       * <code>engineStart = 550;</code>
       */
      public static final CommandType engineStart = ENGINESTART;
      /**
       * <code>engineStop = 560;</code>
       */
      public static final CommandType engineStop = ENGINESTOP;
      /**
       * <code>engineAvpstart = 570;</code>
       */
      public static final CommandType engineAvpstart = ENGINEAVPSTART;
      /**
       * <code>tcuWakeup = 600;</code>
       */
      public static final CommandType tcuWakeup = TCUWAKEUP;
      /**
       * <code>tcuSwUpdate = 610;</code>
       */
      public static final CommandType tcuSwUpdate = TCUSWUPDATE;
      /**
       * <code>tcuRcsReset = 620;</code>
       */
      public static final CommandType tcuRcsReset = TCURCSRESET;
      /**
       * <code>tcuInterrogation = 630;</code>
       */
      public static final CommandType tcuInterrogation = TCUINTERROGATION;
      /**
       * <code>speedalertStart = 710;</code>
       */
      public static final CommandType speedalertStart = SPEEDALERTSTART;
      /**
       * <code>speedalertStop = 720;</code>
       */
      public static final CommandType speedalertStop = SPEEDALERTSTOP;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>flshStart = 750;</code>
       */
      public static final CommandType flshStart = FLSHSTART;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>flshStop = 760;</code>
       */
      public static final CommandType flshStop = FLSHSTOP;
      /**
       * <code>sigposStart = 770;</code>
       */
      public static final CommandType sigposStart = SIGPOSSTART;
      /**
       * <code>contractConfigure = 800;</code>
       */
      public static final CommandType contractConfigure = CONTRACTCONFIGURE;
      /**
       * <code>contractRemove = 810;</code>
       */
      public static final CommandType contractRemove = CONTRACTREMOVE;
      /**
       * <code>rootConfigure = 820;</code>
       */
      public static final CommandType rootConfigure = ROOTCONFIGURE;
      /**
       * <code>rootRemove = 830;</code>
       */
      public static final CommandType rootRemove = ROOTREMOVE;
      /**
       * <pre>
       * reset tripcomp
       * </pre>
       *
       * <code>tripcomp = 850;</code>
       */
      public static final CommandType tripcomp = TRIPCOMP;
      /**
       * <code>maintenanceConfigure = 930;</code>
       */
      public static final CommandType maintenanceConfigure = MAINTENANCECONFIGURE;
      /**
       * <code>maintenanceComputerOffset = 931;</code>
       */
      public static final CommandType maintenanceComputerOffset = MAINTENANCECOMPUTEROFFSET;
      /**
       * <code>shorttestExecute = 935;</code>
       */
      public static final CommandType shorttestExecute = SHORTTESTEXECUTE;
      /**
       * <code>serviceactivationConfigure = 940;</code>
       */
      public static final CommandType serviceactivationConfigure = SERVICEACTIVATIONCONFIGURE;
      /**
       * <code>dc2ServiceactivationConfigure = 945;</code>
       */
      public static final CommandType dc2ServiceactivationConfigure = DC2SERVICEACTIVATIONCONFIGURE;
      /**
       * <pre>
       *(test command)
       * </pre>
       *
       * <code>dc2RawDownload = 950;</code>
       */
      public static final CommandType dc2RawDownload = DC2RAWDOWNLOAD;
      /**
       * <pre>
       * (DC2+)
       * </pre>
       *
       * <code>applicationConfiguration = 955;</code>
       */
      public static final CommandType applicationConfiguration = APPLICATIONCONFIGURATION;
      /**
       * <pre>
       * (test command)
       * </pre>
       *
       * <code>dc2StartTracking = 960;</code>
       */
      public static final CommandType dc2StartTracking = DC2STARTTRACKING;
      /**
       * <code>atpSequence = 990;</code>
       */
      public static final CommandType atpSequence = ATPSEQUENCE;
      /**
       * <code>theftalarmToggleInterior = 1000;</code>
       */
      public static final CommandType theftalarmToggleInterior = THEFTALARMTOGGLEINTERIOR;
      /**
       * <code>theftalarmToggleTow = 1010;</code>
       */
      public static final CommandType theftalarmToggleTow = THEFTALARMTOGGLETOW;
      /**
       * <code>theftalarmSelectInteriorTow = 1020;</code>
       */
      public static final CommandType theftalarmSelectInteriorTow = THEFTALARMSELECTINTERIORTOW;
      /**
       * <code>theftalarmDeselectInteriorTow = 1030;</code>
       */
      public static final CommandType theftalarmDeselectInteriorTow = THEFTALARMDESELECTINTERIORTOW;
      /**
       * <code>theftalarmStop = 1040;</code>
       */
      public static final CommandType theftalarmStop = THEFTALARMSTOP;
      /**
       * <code>windowOpen = 1100;</code>
       */
      public static final CommandType windowOpen = WINDOWOPEN;
      /**
       * <code>windowClose = 1110;</code>
       */
      public static final CommandType windowClose = WINDOWCLOSE;
      /**
       * <code>windowVentilate = 1120;</code>
       */
      public static final CommandType windowVentilate = WINDOWVENTILATE;
      /**
       * <code>windowMove = 1121;</code>
       */
      public static final CommandType windowMove = WINDOWMOVE;
      /**
       * <code>roofOpen = 1130;</code>
       */
      public static final CommandType roofOpen = ROOFOPEN;
      /**
       * <code>roofClose = 1140;</code>
       */
      public static final CommandType roofClose = ROOFCLOSE;
      /**
       * <code>roofLift = 1150;</code>
       */
      public static final CommandType roofLift = ROOFLIFT;
      /**
       * <code>roofMove = 1151;</code>
       */
      public static final CommandType roofMove = ROOFMOVE;
      /**
       * <code>batteryMaxsoc = 2000;</code>
       */
      public static final CommandType batteryMaxsoc = BATTERYMAXSOC;
      /**
       * <code>batteryChargeprogram = 2010;</code>
       */
      public static final CommandType batteryChargeprogram = BATTERYCHARGEPROGRAM;
      /**
       * <code>chargeprogramconfigure = 2020;</code>
       */
      public static final CommandType chargeprogramconfigure = CHARGEPROGRAMCONFIGURE;
      /**
       * <code>onboardfencesCreate = 2100;</code>
       */
      public static final CommandType onboardfencesCreate = ONBOARDFENCESCREATE;
      /**
       * <code>onboardfencesUpdate = 2110;</code>
       */
      public static final CommandType onboardfencesUpdate = ONBOARDFENCESUPDATE;
      /**
       * <code>onboardfencesDelete = 2120;</code>
       */
      public static final CommandType onboardfencesDelete = ONBOARDFENCESDELETE;
      /**
       * <code>speedfencesCreate = 2200;</code>
       */
      public static final CommandType speedfencesCreate = SPEEDFENCESCREATE;
      /**
       * <code>speedfencesUpdate = 2210;</code>
       */
      public static final CommandType speedfencesUpdate = SPEEDFENCESUPDATE;
      /**
       * <code>speedfencesDelete = 2220;</code>
       */
      public static final CommandType speedfencesDelete = SPEEDFENCESDELETE;
      /**
       * <code>chargingtariffsCreate = 2300;</code>
       */
      public static final CommandType chargingtariffsCreate = CHARGINGTARIFFSCREATE;
      /**
       * <code>chargingtariffsUpdate = 2310;</code>
       */
      public static final CommandType chargingtariffsUpdate = CHARGINGTARIFFSUPDATE;
      /**
       * <code>chargingtariffsDelete = 2320;</code>
       */
      public static final CommandType chargingtariffsDelete = CHARGINGTARIFFSDELETE;
      /**
       * <code>theftalarmstart = 2500;</code>
       */
      public static final CommandType theftalarmstart = THEFTALARMSTART;
      /**
       * <code>theftalarmselectinterior = 2510;</code>
       */
      public static final CommandType theftalarmselectinterior = THEFTALARMSELECTINTERIOR;
      /**
       * <code>theftalarmdeselectinterior = 2520;</code>
       */
      public static final CommandType theftalarmdeselectinterior = THEFTALARMDESELECTINTERIOR;
      /**
       * <code>theftalarmselecttow = 2530;</code>
       */
      public static final CommandType theftalarmselecttow = THEFTALARMSELECTTOW;
      /**
       * <code>theftalarmdeselecttow = 2540;</code>
       */
      public static final CommandType theftalarmdeselecttow = THEFTALARMDESELECTTOW;
      /**
       * <code>theftalarmselectdamagedetection = 2550;</code>
       */
      public static final CommandType theftalarmselectdamagedetection = THEFTALARMSELECTDAMAGEDETECTION;
      /**
       * <code>theftalarmdeselectdamagedetection = 2560;</code>
       */
      public static final CommandType theftalarmdeselectdamagedetection = THEFTALARMDESELECTDAMAGEDETECTION;
      /**
       * <code>theftalarmconfirmdamagedetection = 2570;</code>
       */
      public static final CommandType theftalarmconfirmdamagedetection = THEFTALARMCONFIRMDAMAGEDETECTION;
      /**
       * <code>mecall2start = 2600;</code>
       */
      public static final CommandType mecall2start = MECALL2START;
      /**
       * <code>udxTriggerSynchronization = 1200;</code>
       */
      public static final CommandType udxTriggerSynchronization = UDXTRIGGERSYNCHRONIZATION;
      /**
       * <code>udxActiveUserProfile = 1210;</code>
       */
      public static final CommandType udxActiveUserProfile = UDXACTIVEUSERPROFILE;
      /**
       * <code>udxResetUserData = 1220;</code>
       */
      public static final CommandType udxResetUserData = UDXRESETUSERDATA;
      /**
       * <code>userProfSynch = 1230;</code>
       */
      public static final CommandType userProfSynch = USERPROFSYNCH;
      /**
       * <code>userDataReset = 1240;</code>
       */
      public static final CommandType userDataReset = USERDATARESET;
      /**
       * <code>profActivationSnap = 1250;</code>
       */
      public static final CommandType profActivationSnap = PROFACTIVATIONSNAP;
      /**
       * <code>profActivationDirect = 1255;</code>
       */
      public static final CommandType profActivationDirect = PROFACTIVATIONDIRECT;
      /**
       * <code>softwareUpdate = 1260;</code>
       */
      public static final CommandType softwareUpdate = SOFTWAREUPDATE;
      /**
       * <code>pushNotification = 1270;</code>
       */
      public static final CommandType pushNotification = PUSHNOTIFICATION;
      /**
       * <code>mecallcommand = 1310;</code>
       */
      public static final CommandType mecallcommand = MECALLCOMMAND;
      /**
       * <code>precondStartRcs = 1400;</code>
       */
      public static final CommandType precondStartRcs = PRECONDSTARTRCS;
      /**
       * <code>precondStopRcs = 1410;</code>
       */
      public static final CommandType precondStopRcs = PRECONDSTOPRCS;
      /**
       * <code>precondConfigureRcs = 1420;</code>
       */
      public static final CommandType precondConfigureRcs = PRECONDCONFIGURERCS;
      /**
       * <code>tcuConfigure = 1430;</code>
       */
      public static final CommandType tcuConfigure = TCUCONFIGURE;
      /**
       * <code>edisonServiceActivation = 1431;</code>
       */
      public static final CommandType edisonServiceActivation = EDISONSERVICEACTIVATION;
      /**
       * <code>testSequence = 1432;</code>
       */
      public static final CommandType testSequence = TESTSEQUENCE;
      /**
       * <code>precondConfigureRacp = 1433;</code>
       */
      public static final CommandType precondConfigureRacp = PRECONDCONFIGURERACP;
      /**
       * <code>chargeoptConfigureRacp = 1434;</code>
       */
      public static final CommandType chargeoptConfigureRacp = CHARGEOPTCONFIGURERACP;
      /**
       * <code>tariffTableDownload = 1435;</code>
       */
      public static final CommandType tariffTableDownload = TARIFFTABLEDOWNLOAD;
      /**
       * <code>precondStartRacp = 1436;</code>
       */
      public static final CommandType precondStartRacp = PRECONDSTARTRACP;
      /**
       * <code>precondStopRacp = 1437;</code>
       */
      public static final CommandType precondStopRacp = PRECONDSTOPRACP;
      /**
       * <code>rootCertificateRemove = 1438;</code>
       */
      public static final CommandType rootCertificateRemove = ROOTCERTIFICATEREMOVE;
      /**
       * <code>onRequestProbeUpload = 1439;</code>
       */
      public static final CommandType onRequestProbeUpload = ONREQUESTPROBEUPLOAD;
      /**
       * <code>rootCertificateDownload = 1440;</code>
       */
      public static final CommandType rootCertificateDownload = ROOTCERTIFICATEDOWNLOAD;
      /**
       * <code>contractCertificateRemove = 1441;</code>
       */
      public static final CommandType contractCertificateRemove = CONTRACTCERTIFICATEREMOVE;
      /**
       * <code>contractCertificateDownload = 1442;</code>
       */
      public static final CommandType contractCertificateDownload = CONTRACTCERTIFICATEDOWNLOAD;
      /**
       * <code>probeConfigurationUpdate = 1443;</code>
       */
      public static final CommandType probeConfigurationUpdate = PROBECONFIGURATIONUPDATE;
      /**
       * <code>rdiagDeleteEcu = 1500;</code>
       */
      public static final CommandType rdiagDeleteEcu = RDIAGDELETEECU;
      /**
       * <code>rdiagStatusReport = 1501;</code>
       */
      public static final CommandType rdiagStatusReport = RDIAGSTATUSREPORT;
      /**
       * <code>rdiagExecution = 1502;</code>
       */
      public static final CommandType rdiagExecution = RDIAGEXECUTION;
      /**
       * <code>immobilizerChallenge = 1600;</code>
       */
      public static final CommandType immobilizerChallenge = IMMOBILIZERCHALLENGE;
      /**
       * <code>immobilizerSearchKeyline = 1610;</code>
       */
      public static final CommandType immobilizerSearchKeyline = IMMOBILIZERSEARCHKEYLINE;
      /**
       * <code>immobilizerReleaseKeyline = 1620;</code>
       */
      public static final CommandType immobilizerReleaseKeyline = IMMOBILIZERRELEASEKEYLINE;
      /**
       * <code>immobilizerLockKeyline = 1630;</code>
       */
      public static final CommandType immobilizerLockKeyline = IMMOBILIZERLOCKKEYLINE;
      /**
       * <code>immobilizerLockVehicle = 1631;</code>
       */
      public static final CommandType immobilizerLockVehicle = IMMOBILIZERLOCKVEHICLE;
      /**
       * <code>immobilizerReleaseVehicle = 1621;</code>
       */
      public static final CommandType immobilizerReleaseVehicle = IMMOBILIZERRELEASEVEHICLE;
      /**
       * <code>setRentalSignal = 1700;</code>
       */
      public static final CommandType setRentalSignal = SETRENTALSIGNAL;
      /**
       * <code>blackchannelDownload = 1800;</code>
       */
      public static final CommandType blackchannelDownload = BLACKCHANNELDOWNLOAD;
      /**
       * <code>blackchannelUpload = 1810;</code>
       */
      public static final CommandType blackchannelUpload = BLACKCHANNELUPLOAD;
      /**
       * <code>configurecsm = 1900;</code>
       */
      public static final CommandType configurecsm = CONFIGURECSM;
      /**
       * <code>updatevehicleinfo = 1901;</code>
       */
      public static final CommandType updatevehicleinfo = UPDATEVEHICLEINFO;
      /**
       * <code>relaymessagetocsm = 1902;</code>
       */
      public static final CommandType relaymessagetocsm = RELAYMESSAGETOCSM;
      /**
       * <code>relayrentalrequesttocsb = 1903;</code>
       */
      public static final CommandType relayrentalrequesttocsb = RELAYRENTALREQUESTTOCSB;
      /**
       * <code>rtmDownloadConfig = 2400;</code>
       */
      public static final CommandType rtmDownloadConfig = RTMDOWNLOADCONFIG;
      /**
       * <code>rtmReadConfig = 2410;</code>
       */
      public static final CommandType rtmReadConfig = RTMREADCONFIG;
      /**
       * <code>avpActivate = 2700;</code>
       */
      public static final CommandType avpActivate = AVPACTIVATE;
      /**
       * <code>chargecontrolconfigure = 2800;</code>
       */
      public static final CommandType chargecontrolconfigure = CHARGECONTROLCONFIGURE;
      /**
       * <code>chargingbreakclocktimerconfigure = 3000;</code>
       */
      public static final CommandType chargingbreakclocktimerconfigure = CHARGINGBREAKCLOCKTIMERCONFIGURE;
      /**
       * <code>UNKNOWNCOMMANDTYPE = 0;</code>
       */
      public static final int UNKNOWNCOMMANDTYPE_VALUE = 0;
      /**
       * <code>DOORSLOCK = 100;</code>
       */
      public static final int DOORSLOCK_VALUE = 100;
      /**
       * <code>DOORSUNLOCK = 110;</code>
       */
      public static final int DOORSUNLOCK_VALUE = 110;
      /**
       * <code>TRUNKUNLOCK = 115;</code>
       */
      public static final int TRUNKUNLOCK_VALUE = 115;
      /**
       * <code>FUELFLAPUNLOCK = 116;</code>
       */
      public static final int FUELFLAPUNLOCK_VALUE = 116;
      /**
       * <code>CHARGEFLAPUNLOCK = 117;</code>
       */
      public static final int CHARGEFLAPUNLOCK_VALUE = 117;
      /**
       * <code>CHARGECOUPLERUNLOCK = 118;</code>
       */
      public static final int CHARGECOUPLERUNLOCK_VALUE = 118;
      /**
       * <code>DOORSPREPARERENTAL = 120;</code>
       */
      public static final int DOORSPREPARERENTAL_VALUE = 120;
      /**
       * <code>DOORSSECUREVEHICLE = 130;</code>
       */
      public static final int DOORSSECUREVEHICLE_VALUE = 130;
      /**
       * <code>AUXHEATSTART = 300;</code>
       */
      public static final int AUXHEATSTART_VALUE = 300;
      /**
       * <code>AUXHEATSTOP = 310;</code>
       */
      public static final int AUXHEATSTOP_VALUE = 310;
      /**
       * <code>AUXHEATCONFIGURE = 320;</code>
       */
      public static final int AUXHEATCONFIGURE_VALUE = 320;
      /**
       * <code>TEMPERATURECONFIGURE = 350;</code>
       */
      public static final int TEMPERATURECONFIGURE_VALUE = 350;
      /**
       * <code>WEEKPROFILECONFIGURE = 360;</code>
       */
      public static final int WEEKPROFILECONFIGURE_VALUE = 360;
      /**
       * <code>WEEKPROFILEV2CONFIGURE = 370;</code>
       */
      public static final int WEEKPROFILEV2CONFIGURE_VALUE = 370;
      /**
       * <code>PRECONDSTART = 400;</code>
       */
      public static final int PRECONDSTART_VALUE = 400;
      /**
       * <code>PRECONDSTOP = 410;</code>
       */
      public static final int PRECONDSTOP_VALUE = 410;
      /**
       * <code>PRECONDCONFIGURE = 420;</code>
       */
      public static final int PRECONDCONFIGURE_VALUE = 420;
      /**
       * <code>PRECONDCONFIGURESEATS = 425;</code>
       */
      public static final int PRECONDCONFIGURESEATS_VALUE = 425;
      /**
       * <code>CHARGEOPTCONFIGURE = 430;</code>
       */
      public static final int CHARGEOPTCONFIGURE_VALUE = 430;
      /**
       * <code>CHARGEOPTSTART = 440;</code>
       */
      public static final int CHARGEOPTSTART_VALUE = 440;
      /**
       * <code>CHARGEOPTSTOP = 450;</code>
       */
      public static final int CHARGEOPTSTOP_VALUE = 450;
      /**
       * <code>FEEDPOI = 500;</code>
       */
      public static final int FEEDPOI_VALUE = 500;
      /**
       * <code>FEEDFREETEXT = 510;</code>
       */
      public static final int FEEDFREETEXT_VALUE = 510;
      /**
       * <code>ENGINESTART = 550;</code>
       */
      public static final int ENGINESTART_VALUE = 550;
      /**
       * <code>ENGINESTOP = 560;</code>
       */
      public static final int ENGINESTOP_VALUE = 560;
      /**
       * <code>ENGINEAVPSTART = 570;</code>
       */
      public static final int ENGINEAVPSTART_VALUE = 570;
      /**
       * <code>TCUWAKEUP = 600;</code>
       */
      public static final int TCUWAKEUP_VALUE = 600;
      /**
       * <code>TCUSWUPDATE = 610;</code>
       */
      public static final int TCUSWUPDATE_VALUE = 610;
      /**
       * <code>TCURCSRESET = 620;</code>
       */
      public static final int TCURCSRESET_VALUE = 620;
      /**
       * <code>TCUINTERROGATION = 630;</code>
       */
      public static final int TCUINTERROGATION_VALUE = 630;
      /**
       * <code>SPEEDALERTSTART = 710;</code>
       */
      public static final int SPEEDALERTSTART_VALUE = 710;
      /**
       * <code>SPEEDALERTSTOP = 720;</code>
       */
      public static final int SPEEDALERTSTOP_VALUE = 720;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>FLSHSTART = 750;</code>
       */
      public static final int FLSHSTART_VALUE = 750;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>FLSHSTOP = 760;</code>
       */
      public static final int FLSHSTOP_VALUE = 760;
      /**
       * <code>SIGPOSSTART = 770;</code>
       */
      public static final int SIGPOSSTART_VALUE = 770;
      /**
       * <code>CONTRACTCONFIGURE = 800;</code>
       */
      public static final int CONTRACTCONFIGURE_VALUE = 800;
      /**
       * <code>CONTRACTREMOVE = 810;</code>
       */
      public static final int CONTRACTREMOVE_VALUE = 810;
      /**
       * <code>ROOTCONFIGURE = 820;</code>
       */
      public static final int ROOTCONFIGURE_VALUE = 820;
      /**
       * <code>ROOTREMOVE = 830;</code>
       */
      public static final int ROOTREMOVE_VALUE = 830;
      /**
       * <pre>
       * RESET TRIPCOMP
       * </pre>
       *
       * <code>TRIPCOMP = 850;</code>
       */
      public static final int TRIPCOMP_VALUE = 850;
      /**
       * <code>MAINTENANCECONFIGURE = 930;</code>
       */
      public static final int MAINTENANCECONFIGURE_VALUE = 930;
      /**
       * <code>MAINTENANCECOMPUTEROFFSET = 931;</code>
       */
      public static final int MAINTENANCECOMPUTEROFFSET_VALUE = 931;
      /**
       * <code>SHORTTESTEXECUTE = 935;</code>
       */
      public static final int SHORTTESTEXECUTE_VALUE = 935;
      /**
       * <code>SERVICEACTIVATIONCONFIGURE = 940;</code>
       */
      public static final int SERVICEACTIVATIONCONFIGURE_VALUE = 940;
      /**
       * <code>DC2SERVICEACTIVATIONCONFIGURE = 945;</code>
       */
      public static final int DC2SERVICEACTIVATIONCONFIGURE_VALUE = 945;
      /**
       * <pre>
       *(TEST COMMAND)
       * </pre>
       *
       * <code>DC2RAWDOWNLOAD = 950;</code>
       */
      public static final int DC2RAWDOWNLOAD_VALUE = 950;
      /**
       * <pre>
       * (DC2+)
       * </pre>
       *
       * <code>APPLICATIONCONFIGURATION = 955;</code>
       */
      public static final int APPLICATIONCONFIGURATION_VALUE = 955;
      /**
       * <pre>
       * (TEST COMMAND)
       * </pre>
       *
       * <code>DC2STARTTRACKING = 960;</code>
       */
      public static final int DC2STARTTRACKING_VALUE = 960;
      /**
       * <code>ATPSEQUENCE = 990;</code>
       */
      public static final int ATPSEQUENCE_VALUE = 990;
      /**
       * <code>THEFTALARMTOGGLEINTERIOR = 1000;</code>
       */
      public static final int THEFTALARMTOGGLEINTERIOR_VALUE = 1000;
      /**
       * <code>THEFTALARMTOGGLETOW = 1010;</code>
       */
      public static final int THEFTALARMTOGGLETOW_VALUE = 1010;
      /**
       * <code>THEFTALARMSELECTINTERIORTOW = 1020;</code>
       */
      public static final int THEFTALARMSELECTINTERIORTOW_VALUE = 1020;
      /**
       * <code>THEFTALARMDESELECTINTERIORTOW = 1030;</code>
       */
      public static final int THEFTALARMDESELECTINTERIORTOW_VALUE = 1030;
      /**
       * <code>THEFTALARMSTOP = 1040;</code>
       */
      public static final int THEFTALARMSTOP_VALUE = 1040;
      /**
       * <code>WINDOWOPEN = 1100;</code>
       */
      public static final int WINDOWOPEN_VALUE = 1100;
      /**
       * <code>WINDOWCLOSE = 1110;</code>
       */
      public static final int WINDOWCLOSE_VALUE = 1110;
      /**
       * <code>WINDOWVENTILATE = 1120;</code>
       */
      public static final int WINDOWVENTILATE_VALUE = 1120;
      /**
       * <code>WINDOWMOVE = 1121;</code>
       */
      public static final int WINDOWMOVE_VALUE = 1121;
      /**
       * <code>ROOFOPEN = 1130;</code>
       */
      public static final int ROOFOPEN_VALUE = 1130;
      /**
       * <code>ROOFCLOSE = 1140;</code>
       */
      public static final int ROOFCLOSE_VALUE = 1140;
      /**
       * <code>ROOFLIFT = 1150;</code>
       */
      public static final int ROOFLIFT_VALUE = 1150;
      /**
       * <code>ROOFMOVE = 1151;</code>
       */
      public static final int ROOFMOVE_VALUE = 1151;
      /**
       * <code>BATTERYMAXSOC = 2000;</code>
       */
      public static final int BATTERYMAXSOC_VALUE = 2000;
      /**
       * <code>BATTERYCHARGEPROGRAM = 2010;</code>
       */
      public static final int BATTERYCHARGEPROGRAM_VALUE = 2010;
      /**
       * <code>CHARGEPROGRAMCONFIGURE = 2020;</code>
       */
      public static final int CHARGEPROGRAMCONFIGURE_VALUE = 2020;
      /**
       * <code>ONBOARDFENCESCREATE = 2100;</code>
       */
      public static final int ONBOARDFENCESCREATE_VALUE = 2100;
      /**
       * <code>ONBOARDFENCESUPDATE = 2110;</code>
       */
      public static final int ONBOARDFENCESUPDATE_VALUE = 2110;
      /**
       * <code>ONBOARDFENCESDELETE = 2120;</code>
       */
      public static final int ONBOARDFENCESDELETE_VALUE = 2120;
      /**
       * <code>SPEEDFENCESCREATE = 2200;</code>
       */
      public static final int SPEEDFENCESCREATE_VALUE = 2200;
      /**
       * <code>SPEEDFENCESUPDATE = 2210;</code>
       */
      public static final int SPEEDFENCESUPDATE_VALUE = 2210;
      /**
       * <code>SPEEDFENCESDELETE = 2220;</code>
       */
      public static final int SPEEDFENCESDELETE_VALUE = 2220;
      /**
       * <code>CHARGINGTARIFFSCREATE = 2300;</code>
       */
      public static final int CHARGINGTARIFFSCREATE_VALUE = 2300;
      /**
       * <code>CHARGINGTARIFFSUPDATE = 2310;</code>
       */
      public static final int CHARGINGTARIFFSUPDATE_VALUE = 2310;
      /**
       * <code>CHARGINGTARIFFSDELETE = 2320;</code>
       */
      public static final int CHARGINGTARIFFSDELETE_VALUE = 2320;
      /**
       * <code>THEFTALARMSTART = 2500;</code>
       */
      public static final int THEFTALARMSTART_VALUE = 2500;
      /**
       * <code>THEFTALARMSELECTINTERIOR = 2510;</code>
       */
      public static final int THEFTALARMSELECTINTERIOR_VALUE = 2510;
      /**
       * <code>THEFTALARMDESELECTINTERIOR = 2520;</code>
       */
      public static final int THEFTALARMDESELECTINTERIOR_VALUE = 2520;
      /**
       * <code>THEFTALARMSELECTTOW = 2530;</code>
       */
      public static final int THEFTALARMSELECTTOW_VALUE = 2530;
      /**
       * <code>THEFTALARMDESELECTTOW = 2540;</code>
       */
      public static final int THEFTALARMDESELECTTOW_VALUE = 2540;
      /**
       * <code>THEFTALARMSELECTDAMAGEDETECTION = 2550;</code>
       */
      public static final int THEFTALARMSELECTDAMAGEDETECTION_VALUE = 2550;
      /**
       * <code>THEFTALARMDESELECTDAMAGEDETECTION = 2560;</code>
       */
      public static final int THEFTALARMDESELECTDAMAGEDETECTION_VALUE = 2560;
      /**
       * <code>THEFTALARMCONFIRMDAMAGEDETECTION = 2570;</code>
       */
      public static final int THEFTALARMCONFIRMDAMAGEDETECTION_VALUE = 2570;
      /**
       * <code>MECALL2START = 2600;</code>
       */
      public static final int MECALL2START_VALUE = 2600;
      /**
       * <code>UDXTRIGGERSYNCHRONIZATION = 1200;</code>
       */
      public static final int UDXTRIGGERSYNCHRONIZATION_VALUE = 1200;
      /**
       * <code>UDXACTIVEUSERPROFILE = 1210;</code>
       */
      public static final int UDXACTIVEUSERPROFILE_VALUE = 1210;
      /**
       * <code>UDXRESETUSERDATA = 1220;</code>
       */
      public static final int UDXRESETUSERDATA_VALUE = 1220;
      /**
       * <code>USERPROFSYNCH = 1230;</code>
       */
      public static final int USERPROFSYNCH_VALUE = 1230;
      /**
       * <code>USERDATARESET = 1240;</code>
       */
      public static final int USERDATARESET_VALUE = 1240;
      /**
       * <code>PROFACTIVATIONSNAP = 1250;</code>
       */
      public static final int PROFACTIVATIONSNAP_VALUE = 1250;
      /**
       * <code>PROFACTIVATIONDIRECT = 1255;</code>
       */
      public static final int PROFACTIVATIONDIRECT_VALUE = 1255;
      /**
       * <code>SOFTWAREUPDATE = 1260;</code>
       */
      public static final int SOFTWAREUPDATE_VALUE = 1260;
      /**
       * <code>PUSHNOTIFICATION = 1270;</code>
       */
      public static final int PUSHNOTIFICATION_VALUE = 1270;
      /**
       * <code>MECALLCOMMAND = 1310;</code>
       */
      public static final int MECALLCOMMAND_VALUE = 1310;
      /**
       * <code>PRECONDSTARTRCS = 1400;</code>
       */
      public static final int PRECONDSTARTRCS_VALUE = 1400;
      /**
       * <code>PRECONDSTOPRCS = 1410;</code>
       */
      public static final int PRECONDSTOPRCS_VALUE = 1410;
      /**
       * <code>PRECONDCONFIGURERCS = 1420;</code>
       */
      public static final int PRECONDCONFIGURERCS_VALUE = 1420;
      /**
       * <code>TCUCONFIGURE = 1430;</code>
       */
      public static final int TCUCONFIGURE_VALUE = 1430;
      /**
       * <code>EDISONSERVICEACTIVATION = 1431;</code>
       */
      public static final int EDISONSERVICEACTIVATION_VALUE = 1431;
      /**
       * <code>TESTSEQUENCE = 1432;</code>
       */
      public static final int TESTSEQUENCE_VALUE = 1432;
      /**
       * <code>PRECONDCONFIGURERACP = 1433;</code>
       */
      public static final int PRECONDCONFIGURERACP_VALUE = 1433;
      /**
       * <code>CHARGEOPTCONFIGURERACP = 1434;</code>
       */
      public static final int CHARGEOPTCONFIGURERACP_VALUE = 1434;
      /**
       * <code>TARIFFTABLEDOWNLOAD = 1435;</code>
       */
      public static final int TARIFFTABLEDOWNLOAD_VALUE = 1435;
      /**
       * <code>PRECONDSTARTRACP = 1436;</code>
       */
      public static final int PRECONDSTARTRACP_VALUE = 1436;
      /**
       * <code>PRECONDSTOPRACP = 1437;</code>
       */
      public static final int PRECONDSTOPRACP_VALUE = 1437;
      /**
       * <code>ROOTCERTIFICATEREMOVE = 1438;</code>
       */
      public static final int ROOTCERTIFICATEREMOVE_VALUE = 1438;
      /**
       * <code>ONREQUESTPROBEUPLOAD = 1439;</code>
       */
      public static final int ONREQUESTPROBEUPLOAD_VALUE = 1439;
      /**
       * <code>ROOTCERTIFICATEDOWNLOAD = 1440;</code>
       */
      public static final int ROOTCERTIFICATEDOWNLOAD_VALUE = 1440;
      /**
       * <code>CONTRACTCERTIFICATEREMOVE = 1441;</code>
       */
      public static final int CONTRACTCERTIFICATEREMOVE_VALUE = 1441;
      /**
       * <code>CONTRACTCERTIFICATEDOWNLOAD = 1442;</code>
       */
      public static final int CONTRACTCERTIFICATEDOWNLOAD_VALUE = 1442;
      /**
       * <code>PROBECONFIGURATIONUPDATE = 1443;</code>
       */
      public static final int PROBECONFIGURATIONUPDATE_VALUE = 1443;
      /**
       * <code>RDIAGDELETEECU = 1500;</code>
       */
      public static final int RDIAGDELETEECU_VALUE = 1500;
      /**
       * <code>RDIAGSTATUSREPORT = 1501;</code>
       */
      public static final int RDIAGSTATUSREPORT_VALUE = 1501;
      /**
       * <code>RDIAGEXECUTION = 1502;</code>
       */
      public static final int RDIAGEXECUTION_VALUE = 1502;
      /**
       * <code>IMMOBILIZERCHALLENGE = 1600;</code>
       */
      public static final int IMMOBILIZERCHALLENGE_VALUE = 1600;
      /**
       * <code>IMMOBILIZERSEARCHKEYLINE = 1610;</code>
       */
      public static final int IMMOBILIZERSEARCHKEYLINE_VALUE = 1610;
      /**
       * <code>IMMOBILIZERRELEASEKEYLINE = 1620;</code>
       */
      public static final int IMMOBILIZERRELEASEKEYLINE_VALUE = 1620;
      /**
       * <code>IMMOBILIZERLOCKKEYLINE = 1630;</code>
       */
      public static final int IMMOBILIZERLOCKKEYLINE_VALUE = 1630;
      /**
       * <code>IMMOBILIZERLOCKVEHICLE = 1631;</code>
       */
      public static final int IMMOBILIZERLOCKVEHICLE_VALUE = 1631;
      /**
       * <code>IMMOBILIZERRELEASEVEHICLE = 1621;</code>
       */
      public static final int IMMOBILIZERRELEASEVEHICLE_VALUE = 1621;
      /**
       * <code>SETRENTALSIGNAL = 1700;</code>
       */
      public static final int SETRENTALSIGNAL_VALUE = 1700;
      /**
       * <code>BLACKCHANNELDOWNLOAD = 1800;</code>
       */
      public static final int BLACKCHANNELDOWNLOAD_VALUE = 1800;
      /**
       * <code>BLACKCHANNELUPLOAD = 1810;</code>
       */
      public static final int BLACKCHANNELUPLOAD_VALUE = 1810;
      /**
       * <code>CONFIGURECSM = 1900;</code>
       */
      public static final int CONFIGURECSM_VALUE = 1900;
      /**
       * <code>UPDATEVEHICLEINFO = 1901;</code>
       */
      public static final int UPDATEVEHICLEINFO_VALUE = 1901;
      /**
       * <code>RELAYMESSAGETOCSM = 1902;</code>
       */
      public static final int RELAYMESSAGETOCSM_VALUE = 1902;
      /**
       * <code>RELAYRENTALREQUESTTOCSB = 1903;</code>
       */
      public static final int RELAYRENTALREQUESTTOCSB_VALUE = 1903;
      /**
       * <code>RTMDOWNLOADCONFIG = 2400;</code>
       */
      public static final int RTMDOWNLOADCONFIG_VALUE = 2400;
      /**
       * <code>RTMREADCONFIG = 2410;</code>
       */
      public static final int RTMREADCONFIG_VALUE = 2410;
      /**
       * <code>AVPACTIVATE = 2700;</code>
       */
      public static final int AVPACTIVATE_VALUE = 2700;
      /**
       * <code>CHARGECONTROLCONFIGURE = 2800;</code>
       */
      public static final int CHARGECONTROLCONFIGURE_VALUE = 2800;
      /**
       * <code>CHARGINGBREAKCLOCKTIMERCONFIGURE = 3000;</code>
       */
      public static final int CHARGINGBREAKCLOCKTIMERCONFIGURE_VALUE = 3000;
      /**
       * <code>unknownCommandType = 0;</code>
       */
      public static final int unknownCommandType_VALUE = 0;
      /**
       * <code>doorsLock = 100;</code>
       */
      public static final int doorsLock_VALUE = 100;
      /**
       * <code>doorsUnlock = 110;</code>
       */
      public static final int doorsUnlock_VALUE = 110;
      /**
       * <code>trunkUnlock = 115;</code>
       */
      public static final int trunkUnlock_VALUE = 115;
      /**
       * <code>fuelflapUnlock = 116;</code>
       */
      public static final int fuelflapUnlock_VALUE = 116;
      /**
       * <code>chargeflapUnlock = 117;</code>
       */
      public static final int chargeflapUnlock_VALUE = 117;
      /**
       * <code>chargecouplerUnlock = 118;</code>
       */
      public static final int chargecouplerUnlock_VALUE = 118;
      /**
       * <code>doorsPrepareRental = 120;</code>
       */
      public static final int doorsPrepareRental_VALUE = 120;
      /**
       * <code>doorsSecureVehicle = 130;</code>
       */
      public static final int doorsSecureVehicle_VALUE = 130;
      /**
       * <code>auxheatStart = 300;</code>
       */
      public static final int auxheatStart_VALUE = 300;
      /**
       * <code>auxheatStop = 310;</code>
       */
      public static final int auxheatStop_VALUE = 310;
      /**
       * <code>auxheatConfigure = 320;</code>
       */
      public static final int auxheatConfigure_VALUE = 320;
      /**
       * <code>temperatureConfigure = 350;</code>
       */
      public static final int temperatureConfigure_VALUE = 350;
      /**
       * <code>weekprofileConfigure = 360;</code>
       */
      public static final int weekprofileConfigure_VALUE = 360;
      /**
       * <code>weekprofileV2Configure = 370;</code>
       */
      public static final int weekprofileV2Configure_VALUE = 370;
      /**
       * <code>precondStart = 400;</code>
       */
      public static final int precondStart_VALUE = 400;
      /**
       * <code>precondStop = 410;</code>
       */
      public static final int precondStop_VALUE = 410;
      /**
       * <code>precondConfigure = 420;</code>
       */
      public static final int precondConfigure_VALUE = 420;
      /**
       * <code>precondConfigureSeats = 425;</code>
       */
      public static final int precondConfigureSeats_VALUE = 425;
      /**
       * <code>chargeoptConfigure = 430;</code>
       */
      public static final int chargeoptConfigure_VALUE = 430;
      /**
       * <code>chargeoptStart = 440;</code>
       */
      public static final int chargeoptStart_VALUE = 440;
      /**
       * <code>chargeoptStop = 450;</code>
       */
      public static final int chargeoptStop_VALUE = 450;
      /**
       * <code>feedPoi = 500;</code>
       */
      public static final int feedPoi_VALUE = 500;
      /**
       * <code>feedFreetext = 510;</code>
       */
      public static final int feedFreetext_VALUE = 510;
      /**
       * <code>engineStart = 550;</code>
       */
      public static final int engineStart_VALUE = 550;
      /**
       * <code>engineStop = 560;</code>
       */
      public static final int engineStop_VALUE = 560;
      /**
       * <code>engineAvpstart = 570;</code>
       */
      public static final int engineAvpstart_VALUE = 570;
      /**
       * <code>tcuWakeup = 600;</code>
       */
      public static final int tcuWakeup_VALUE = 600;
      /**
       * <code>tcuSwUpdate = 610;</code>
       */
      public static final int tcuSwUpdate_VALUE = 610;
      /**
       * <code>tcuRcsReset = 620;</code>
       */
      public static final int tcuRcsReset_VALUE = 620;
      /**
       * <code>tcuInterrogation = 630;</code>
       */
      public static final int tcuInterrogation_VALUE = 630;
      /**
       * <code>speedalertStart = 710;</code>
       */
      public static final int speedalertStart_VALUE = 710;
      /**
       * <code>speedalertStop = 720;</code>
       */
      public static final int speedalertStop_VALUE = 720;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>flshStart = 750;</code>
       */
      public static final int flshStart_VALUE = 750;
      /**
       * <pre>
       * (DEPRECATED)
       * </pre>
       *
       * <code>flshStop = 760;</code>
       */
      public static final int flshStop_VALUE = 760;
      /**
       * <code>sigposStart = 770;</code>
       */
      public static final int sigposStart_VALUE = 770;
      /**
       * <code>contractConfigure = 800;</code>
       */
      public static final int contractConfigure_VALUE = 800;
      /**
       * <code>contractRemove = 810;</code>
       */
      public static final int contractRemove_VALUE = 810;
      /**
       * <code>rootConfigure = 820;</code>
       */
      public static final int rootConfigure_VALUE = 820;
      /**
       * <code>rootRemove = 830;</code>
       */
      public static final int rootRemove_VALUE = 830;
      /**
       * <pre>
       * reset tripcomp
       * </pre>
       *
       * <code>tripcomp = 850;</code>
       */
      public static final int tripcomp_VALUE = 850;
      /**
       * <code>maintenanceConfigure = 930;</code>
       */
      public static final int maintenanceConfigure_VALUE = 930;
      /**
       * <code>maintenanceComputerOffset = 931;</code>
       */
      public static final int maintenanceComputerOffset_VALUE = 931;
      /**
       * <code>shorttestExecute = 935;</code>
       */
      public static final int shorttestExecute_VALUE = 935;
      /**
       * <code>serviceactivationConfigure = 940;</code>
       */
      public static final int serviceactivationConfigure_VALUE = 940;
      /**
       * <code>dc2ServiceactivationConfigure = 945;</code>
       */
      public static final int dc2ServiceactivationConfigure_VALUE = 945;
      /**
       * <pre>
       *(test command)
       * </pre>
       *
       * <code>dc2RawDownload = 950;</code>
       */
      public static final int dc2RawDownload_VALUE = 950;
      /**
       * <pre>
       * (DC2+)
       * </pre>
       *
       * <code>applicationConfiguration = 955;</code>
       */
      public static final int applicationConfiguration_VALUE = 955;
      /**
       * <pre>
       * (test command)
       * </pre>
       *
       * <code>dc2StartTracking = 960;</code>
       */
      public static final int dc2StartTracking_VALUE = 960;
      /**
       * <code>atpSequence = 990;</code>
       */
      public static final int atpSequence_VALUE = 990;
      /**
       * <code>theftalarmToggleInterior = 1000;</code>
       */
      public static final int theftalarmToggleInterior_VALUE = 1000;
      /**
       * <code>theftalarmToggleTow = 1010;</code>
       */
      public static final int theftalarmToggleTow_VALUE = 1010;
      /**
       * <code>theftalarmSelectInteriorTow = 1020;</code>
       */
      public static final int theftalarmSelectInteriorTow_VALUE = 1020;
      /**
       * <code>theftalarmDeselectInteriorTow = 1030;</code>
       */
      public static final int theftalarmDeselectInteriorTow_VALUE = 1030;
      /**
       * <code>theftalarmStop = 1040;</code>
       */
      public static final int theftalarmStop_VALUE = 1040;
      /**
       * <code>windowOpen = 1100;</code>
       */
      public static final int windowOpen_VALUE = 1100;
      /**
       * <code>windowClose = 1110;</code>
       */
      public static final int windowClose_VALUE = 1110;
      /**
       * <code>windowVentilate = 1120;</code>
       */
      public static final int windowVentilate_VALUE = 1120;
      /**
       * <code>windowMove = 1121;</code>
       */
      public static final int windowMove_VALUE = 1121;
      /**
       * <code>roofOpen = 1130;</code>
       */
      public static final int roofOpen_VALUE = 1130;
      /**
       * <code>roofClose = 1140;</code>
       */
      public static final int roofClose_VALUE = 1140;
      /**
       * <code>roofLift = 1150;</code>
       */
      public static final int roofLift_VALUE = 1150;
      /**
       * <code>roofMove = 1151;</code>
       */
      public static final int roofMove_VALUE = 1151;
      /**
       * <code>batteryMaxsoc = 2000;</code>
       */
      public static final int batteryMaxsoc_VALUE = 2000;
      /**
       * <code>batteryChargeprogram = 2010;</code>
       */
      public static final int batteryChargeprogram_VALUE = 2010;
      /**
       * <code>chargeprogramconfigure = 2020;</code>
       */
      public static final int chargeprogramconfigure_VALUE = 2020;
      /**
       * <code>onboardfencesCreate = 2100;</code>
       */
      public static final int onboardfencesCreate_VALUE = 2100;
      /**
       * <code>onboardfencesUpdate = 2110;</code>
       */
      public static final int onboardfencesUpdate_VALUE = 2110;
      /**
       * <code>onboardfencesDelete = 2120;</code>
       */
      public static final int onboardfencesDelete_VALUE = 2120;
      /**
       * <code>speedfencesCreate = 2200;</code>
       */
      public static final int speedfencesCreate_VALUE = 2200;
      /**
       * <code>speedfencesUpdate = 2210;</code>
       */
      public static final int speedfencesUpdate_VALUE = 2210;
      /**
       * <code>speedfencesDelete = 2220;</code>
       */
      public static final int speedfencesDelete_VALUE = 2220;
      /**
       * <code>chargingtariffsCreate = 2300;</code>
       */
      public static final int chargingtariffsCreate_VALUE = 2300;
      /**
       * <code>chargingtariffsUpdate = 2310;</code>
       */
      public static final int chargingtariffsUpdate_VALUE = 2310;
      /**
       * <code>chargingtariffsDelete = 2320;</code>
       */
      public static final int chargingtariffsDelete_VALUE = 2320;
      /**
       * <code>theftalarmstart = 2500;</code>
       */
      public static final int theftalarmstart_VALUE = 2500;
      /**
       * <code>theftalarmselectinterior = 2510;</code>
       */
      public static final int theftalarmselectinterior_VALUE = 2510;
      /**
       * <code>theftalarmdeselectinterior = 2520;</code>
       */
      public static final int theftalarmdeselectinterior_VALUE = 2520;
      /**
       * <code>theftalarmselecttow = 2530;</code>
       */
      public static final int theftalarmselecttow_VALUE = 2530;
      /**
       * <code>theftalarmdeselecttow = 2540;</code>
       */
      public static final int theftalarmdeselecttow_VALUE = 2540;
      /**
       * <code>theftalarmselectdamagedetection = 2550;</code>
       */
      public static final int theftalarmselectdamagedetection_VALUE = 2550;
      /**
       * <code>theftalarmdeselectdamagedetection = 2560;</code>
       */
      public static final int theftalarmdeselectdamagedetection_VALUE = 2560;
      /**
       * <code>theftalarmconfirmdamagedetection = 2570;</code>
       */
      public static final int theftalarmconfirmdamagedetection_VALUE = 2570;
      /**
       * <code>mecall2start = 2600;</code>
       */
      public static final int mecall2start_VALUE = 2600;
      /**
       * <code>udxTriggerSynchronization = 1200;</code>
       */
      public static final int udxTriggerSynchronization_VALUE = 1200;
      /**
       * <code>udxActiveUserProfile = 1210;</code>
       */
      public static final int udxActiveUserProfile_VALUE = 1210;
      /**
       * <code>udxResetUserData = 1220;</code>
       */
      public static final int udxResetUserData_VALUE = 1220;
      /**
       * <code>userProfSynch = 1230;</code>
       */
      public static final int userProfSynch_VALUE = 1230;
      /**
       * <code>userDataReset = 1240;</code>
       */
      public static final int userDataReset_VALUE = 1240;
      /**
       * <code>profActivationSnap = 1250;</code>
       */
      public static final int profActivationSnap_VALUE = 1250;
      /**
       * <code>profActivationDirect = 1255;</code>
       */
      public static final int profActivationDirect_VALUE = 1255;
      /**
       * <code>softwareUpdate = 1260;</code>
       */
      public static final int softwareUpdate_VALUE = 1260;
      /**
       * <code>pushNotification = 1270;</code>
       */
      public static final int pushNotification_VALUE = 1270;
      /**
       * <code>mecallcommand = 1310;</code>
       */
      public static final int mecallcommand_VALUE = 1310;
      /**
       * <code>precondStartRcs = 1400;</code>
       */
      public static final int precondStartRcs_VALUE = 1400;
      /**
       * <code>precondStopRcs = 1410;</code>
       */
      public static final int precondStopRcs_VALUE = 1410;
      /**
       * <code>precondConfigureRcs = 1420;</code>
       */
      public static final int precondConfigureRcs_VALUE = 1420;
      /**
       * <code>tcuConfigure = 1430;</code>
       */
      public static final int tcuConfigure_VALUE = 1430;
      /**
       * <code>edisonServiceActivation = 1431;</code>
       */
      public static final int edisonServiceActivation_VALUE = 1431;
      /**
       * <code>testSequence = 1432;</code>
       */
      public static final int testSequence_VALUE = 1432;
      /**
       * <code>precondConfigureRacp = 1433;</code>
       */
      public static final int precondConfigureRacp_VALUE = 1433;
      /**
       * <code>chargeoptConfigureRacp = 1434;</code>
       */
      public static final int chargeoptConfigureRacp_VALUE = 1434;
      /**
       * <code>tariffTableDownload = 1435;</code>
       */
      public static final int tariffTableDownload_VALUE = 1435;
      /**
       * <code>precondStartRacp = 1436;</code>
       */
      public static final int precondStartRacp_VALUE = 1436;
      /**
       * <code>precondStopRacp = 1437;</code>
       */
      public static final int precondStopRacp_VALUE = 1437;
      /**
       * <code>rootCertificateRemove = 1438;</code>
       */
      public static final int rootCertificateRemove_VALUE = 1438;
      /**
       * <code>onRequestProbeUpload = 1439;</code>
       */
      public static final int onRequestProbeUpload_VALUE = 1439;
      /**
       * <code>rootCertificateDownload = 1440;</code>
       */
      public static final int rootCertificateDownload_VALUE = 1440;
      /**
       * <code>contractCertificateRemove = 1441;</code>
       */
      public static final int contractCertificateRemove_VALUE = 1441;
      /**
       * <code>contractCertificateDownload = 1442;</code>
       */
      public static final int contractCertificateDownload_VALUE = 1442;
      /**
       * <code>probeConfigurationUpdate = 1443;</code>
       */
      public static final int probeConfigurationUpdate_VALUE = 1443;
      /**
       * <code>rdiagDeleteEcu = 1500;</code>
       */
      public static final int rdiagDeleteEcu_VALUE = 1500;
      /**
       * <code>rdiagStatusReport = 1501;</code>
       */
      public static final int rdiagStatusReport_VALUE = 1501;
      /**
       * <code>rdiagExecution = 1502;</code>
       */
      public static final int rdiagExecution_VALUE = 1502;
      /**
       * <code>immobilizerChallenge = 1600;</code>
       */
      public static final int immobilizerChallenge_VALUE = 1600;
      /**
       * <code>immobilizerSearchKeyline = 1610;</code>
       */
      public static final int immobilizerSearchKeyline_VALUE = 1610;
      /**
       * <code>immobilizerReleaseKeyline = 1620;</code>
       */
      public static final int immobilizerReleaseKeyline_VALUE = 1620;
      /**
       * <code>immobilizerLockKeyline = 1630;</code>
       */
      public static final int immobilizerLockKeyline_VALUE = 1630;
      /**
       * <code>immobilizerLockVehicle = 1631;</code>
       */
      public static final int immobilizerLockVehicle_VALUE = 1631;
      /**
       * <code>immobilizerReleaseVehicle = 1621;</code>
       */
      public static final int immobilizerReleaseVehicle_VALUE = 1621;
      /**
       * <code>setRentalSignal = 1700;</code>
       */
      public static final int setRentalSignal_VALUE = 1700;
      /**
       * <code>blackchannelDownload = 1800;</code>
       */
      public static final int blackchannelDownload_VALUE = 1800;
      /**
       * <code>blackchannelUpload = 1810;</code>
       */
      public static final int blackchannelUpload_VALUE = 1810;
      /**
       * <code>configurecsm = 1900;</code>
       */
      public static final int configurecsm_VALUE = 1900;
      /**
       * <code>updatevehicleinfo = 1901;</code>
       */
      public static final int updatevehicleinfo_VALUE = 1901;
      /**
       * <code>relaymessagetocsm = 1902;</code>
       */
      public static final int relaymessagetocsm_VALUE = 1902;
      /**
       * <code>relayrentalrequesttocsb = 1903;</code>
       */
      public static final int relayrentalrequesttocsb_VALUE = 1903;
      /**
       * <code>rtmDownloadConfig = 2400;</code>
       */
      public static final int rtmDownloadConfig_VALUE = 2400;
      /**
       * <code>rtmReadConfig = 2410;</code>
       */
      public static final int rtmReadConfig_VALUE = 2410;
      /**
       * <code>avpActivate = 2700;</code>
       */
      public static final int avpActivate_VALUE = 2700;
      /**
       * <code>chargecontrolconfigure = 2800;</code>
       */
      public static final int chargecontrolconfigure_VALUE = 2800;
      /**
       * <code>chargingbreakclocktimerconfigure = 3000;</code>
       */
      public static final int chargingbreakclocktimerconfigure_VALUE = 3000;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommandType valueOf(int value) {
        return forNumber(value);
      }

      public static CommandType forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWNCOMMANDTYPE;
          case 100: return DOORSLOCK;
          case 110: return DOORSUNLOCK;
          case 115: return TRUNKUNLOCK;
          case 116: return FUELFLAPUNLOCK;
          case 117: return CHARGEFLAPUNLOCK;
          case 118: return CHARGECOUPLERUNLOCK;
          case 120: return DOORSPREPARERENTAL;
          case 130: return DOORSSECUREVEHICLE;
          case 300: return AUXHEATSTART;
          case 310: return AUXHEATSTOP;
          case 320: return AUXHEATCONFIGURE;
          case 350: return TEMPERATURECONFIGURE;
          case 360: return WEEKPROFILECONFIGURE;
          case 370: return WEEKPROFILEV2CONFIGURE;
          case 400: return PRECONDSTART;
          case 410: return PRECONDSTOP;
          case 420: return PRECONDCONFIGURE;
          case 425: return PRECONDCONFIGURESEATS;
          case 430: return CHARGEOPTCONFIGURE;
          case 440: return CHARGEOPTSTART;
          case 450: return CHARGEOPTSTOP;
          case 500: return FEEDPOI;
          case 510: return FEEDFREETEXT;
          case 550: return ENGINESTART;
          case 560: return ENGINESTOP;
          case 570: return ENGINEAVPSTART;
          case 600: return TCUWAKEUP;
          case 610: return TCUSWUPDATE;
          case 620: return TCURCSRESET;
          case 630: return TCUINTERROGATION;
          case 710: return SPEEDALERTSTART;
          case 720: return SPEEDALERTSTOP;
          case 750: return FLSHSTART;
          case 760: return FLSHSTOP;
          case 770: return SIGPOSSTART;
          case 800: return CONTRACTCONFIGURE;
          case 810: return CONTRACTREMOVE;
          case 820: return ROOTCONFIGURE;
          case 830: return ROOTREMOVE;
          case 850: return TRIPCOMP;
          case 930: return MAINTENANCECONFIGURE;
          case 931: return MAINTENANCECOMPUTEROFFSET;
          case 935: return SHORTTESTEXECUTE;
          case 940: return SERVICEACTIVATIONCONFIGURE;
          case 945: return DC2SERVICEACTIVATIONCONFIGURE;
          case 950: return DC2RAWDOWNLOAD;
          case 955: return APPLICATIONCONFIGURATION;
          case 960: return DC2STARTTRACKING;
          case 990: return ATPSEQUENCE;
          case 1000: return THEFTALARMTOGGLEINTERIOR;
          case 1010: return THEFTALARMTOGGLETOW;
          case 1020: return THEFTALARMSELECTINTERIORTOW;
          case 1030: return THEFTALARMDESELECTINTERIORTOW;
          case 1040: return THEFTALARMSTOP;
          case 1100: return WINDOWOPEN;
          case 1110: return WINDOWCLOSE;
          case 1120: return WINDOWVENTILATE;
          case 1121: return WINDOWMOVE;
          case 1130: return ROOFOPEN;
          case 1140: return ROOFCLOSE;
          case 1150: return ROOFLIFT;
          case 1151: return ROOFMOVE;
          case 2000: return BATTERYMAXSOC;
          case 2010: return BATTERYCHARGEPROGRAM;
          case 2020: return CHARGEPROGRAMCONFIGURE;
          case 2100: return ONBOARDFENCESCREATE;
          case 2110: return ONBOARDFENCESUPDATE;
          case 2120: return ONBOARDFENCESDELETE;
          case 2200: return SPEEDFENCESCREATE;
          case 2210: return SPEEDFENCESUPDATE;
          case 2220: return SPEEDFENCESDELETE;
          case 2300: return CHARGINGTARIFFSCREATE;
          case 2310: return CHARGINGTARIFFSUPDATE;
          case 2320: return CHARGINGTARIFFSDELETE;
          case 2500: return THEFTALARMSTART;
          case 2510: return THEFTALARMSELECTINTERIOR;
          case 2520: return THEFTALARMDESELECTINTERIOR;
          case 2530: return THEFTALARMSELECTTOW;
          case 2540: return THEFTALARMDESELECTTOW;
          case 2550: return THEFTALARMSELECTDAMAGEDETECTION;
          case 2560: return THEFTALARMDESELECTDAMAGEDETECTION;
          case 2570: return THEFTALARMCONFIRMDAMAGEDETECTION;
          case 2600: return MECALL2START;
          case 1200: return UDXTRIGGERSYNCHRONIZATION;
          case 1210: return UDXACTIVEUSERPROFILE;
          case 1220: return UDXRESETUSERDATA;
          case 1230: return USERPROFSYNCH;
          case 1240: return USERDATARESET;
          case 1250: return PROFACTIVATIONSNAP;
          case 1255: return PROFACTIVATIONDIRECT;
          case 1260: return SOFTWAREUPDATE;
          case 1270: return PUSHNOTIFICATION;
          case 1310: return MECALLCOMMAND;
          case 1400: return PRECONDSTARTRCS;
          case 1410: return PRECONDSTOPRCS;
          case 1420: return PRECONDCONFIGURERCS;
          case 1430: return TCUCONFIGURE;
          case 1431: return EDISONSERVICEACTIVATION;
          case 1432: return TESTSEQUENCE;
          case 1433: return PRECONDCONFIGURERACP;
          case 1434: return CHARGEOPTCONFIGURERACP;
          case 1435: return TARIFFTABLEDOWNLOAD;
          case 1436: return PRECONDSTARTRACP;
          case 1437: return PRECONDSTOPRACP;
          case 1438: return ROOTCERTIFICATEREMOVE;
          case 1439: return ONREQUESTPROBEUPLOAD;
          case 1440: return ROOTCERTIFICATEDOWNLOAD;
          case 1441: return CONTRACTCERTIFICATEREMOVE;
          case 1442: return CONTRACTCERTIFICATEDOWNLOAD;
          case 1443: return PROBECONFIGURATIONUPDATE;
          case 1500: return RDIAGDELETEECU;
          case 1501: return RDIAGSTATUSREPORT;
          case 1502: return RDIAGEXECUTION;
          case 1600: return IMMOBILIZERCHALLENGE;
          case 1610: return IMMOBILIZERSEARCHKEYLINE;
          case 1620: return IMMOBILIZERRELEASEKEYLINE;
          case 1630: return IMMOBILIZERLOCKKEYLINE;
          case 1631: return IMMOBILIZERLOCKVEHICLE;
          case 1621: return IMMOBILIZERRELEASEVEHICLE;
          case 1700: return SETRENTALSIGNAL;
          case 1800: return BLACKCHANNELDOWNLOAD;
          case 1810: return BLACKCHANNELUPLOAD;
          case 1900: return CONFIGURECSM;
          case 1901: return UPDATEVEHICLEINFO;
          case 1902: return RELAYMESSAGETOCSM;
          case 1903: return RELAYRENTALREQUESTTOCSB;
          case 2400: return RTMDOWNLOADCONFIG;
          case 2410: return RTMREADCONFIG;
          case 2700: return AVPACTIVATE;
          case 2800: return CHARGECONTROLCONFIGURE;
          case 3000: return CHARGINGBREAKCLOCKTIMERCONFIGURE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommandType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CommandType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommandType>() {
              public CommandType findValueByNumber(int number) {
                return CommandType.forNumber(number);
              }
            };

      private final int value;

      private CommandType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.ACP.CommandType)
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.daimler.mbprotokit.generated.Acp.ACP parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.daimler.mbprotokit.generated.Acp.ACP prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code proto.ACP}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.daimler.mbprotokit.generated.Acp.ACP, Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.ACP)
        com.daimler.mbprotokit.generated.Acp.ACPOrBuilder {
      // Construct using com.daimler.mbprotokit.generated.Acp.ACP.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:proto.ACP)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.daimler.mbprotokit.generated.Acp.ACP();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.daimler.mbprotokit.generated.Acp.ACP other = (com.daimler.mbprotokit.generated.Acp.ACP) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.daimler.mbprotokit.generated.Acp.ACP.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:proto.ACP)
    private static final com.daimler.mbprotokit.generated.Acp.ACP DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ACP();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.daimler.mbprotokit.generated.Acp.ACP getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ACP> PARSER;

    public static com.google.protobuf.Parser<ACP> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
